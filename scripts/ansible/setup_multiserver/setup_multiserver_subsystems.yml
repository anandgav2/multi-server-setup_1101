- name: Generate executables.csv dynamically
  hosts: localhost
 # become: yes # Run tasks with root privileges


  vars:
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
    host_alias_content: "{{ lookup('file', '{{ installer_path }}/host_alias.txt').splitlines() }}"
    use_existing_servers: "{{ lookup('env', 'USE_EXISTING_SERVERS').split(',') | first}}"

  tasks:
    - name: Load CIP Config parameters
      include_vars:
        file: ./executables.yml

    - name: Load Global config parameters
      include_vars:
        file: "{{ installer_path }}/cip_setup_automation.yml"
        file: "{{ installer_path }}/cip_setup_server_config.yml"

    - name: Print logs
      debug:
         msg: "{{ item | split(' ') | first}}"
      loop: "{{ host_alias_content }}"

    - name: get server configuration
      ansible.builtin.debug:
              #msg: "{{ {{ item | split(' ') | first }}_config }}"
        msg: "{{ lookup('vars',item | split(' ') | first + '_config') }}"
      loop: "{{ host_alias_content }}"

    - name: write to inventory
      shell: echo -e "cip:\n  hosts:" > ./inventory.yml
      
    - name: call yaml if aws servers
      include_tasks: parse_multiserver_config.yaml
      vars:
        host: "{{ item | split(' ') | first }}"
        #host_ip: "{{ item | split(' ') | last }}"
        host_ip: "{{ item.split(' ')[1] }}"
        pem_file: "{{ ansible_env.PWD | dirname | dirname }}/terraform/aws-cip-key-multi.pem"
        config: "{{ lookup('vars',item | split(' ') | first + '_config') }}"
        counter: "{{ iteration+1 }}"
        user: "ec2-user"
        host_name: "{{ item | split(' ') | last }}"
      when: use_existing_servers == False
      loop: "{{ host_alias_content }}"
      loop_control:
        index_var: iteration
        
    - name: call yaml if existing servers
      include_tasks: parse_multiserver_config.yaml
      vars:
        host: "{{ item | split(' ') | first }}"
        #host_ip: "{{ item | split(' ') | last }}"
        host_ip: "{{ item.split(' ')[1] }}"
        pem_file: "{{ lookup('vars',item | split(' ') | first + '_private_key') }}"
        config: "{{ lookup('vars',item | split(' ') | first + '_config') }}"
        counter: "{{ iteration+1 }}"
        user: "{{ functional_user }}"
        host_name: "{{ item | split(' ') | last }}"
      when: use_existing_servers == True
      loop: "{{ host_alias_content }}"
      loop_control:
         index_var: iteration

    - name: delete subsystem_mapping file
      file:
        path: subsystem_mapping.yml
        state: absent
      delegate_to: localhost
      ignore_errors: true
        
    - name: Print subsystem mapping
      lineinfile:
        path: subsystem_mapping.yml
        line: "{{ subsystem_mapping }}"
        state: present
        create: true
      with_items:
        - "{{ 'cip_common_all_target_servers: ' + cip_common_all_target_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_act_server: ' + cip_common_act_server | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_audit_server: ' + cip_common_audit_server | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_collect_server: ' + cip_common_collect_server | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_contact_policy_server: ' + cip_common_contact_policy_server | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_detect_servers: ' + cip_common_detect_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_eligibility_servers: ' + cip_common_eligibility_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_eligible_queue_servers: ' + cip_common_eligible_queue_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_enrichment_queue_servers: ' + cip_common_enrichment_queue_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_enrichment_servers: ' + cip_common_enrichment_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_inbound_channel_queue_servers: ' + cip_common_inbound_channel_queue_servers | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_segmentation_server: ' + cip_common_segmentation_server | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_nbos_server: ' + cip_common_nbos_server | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'cip_common_nbos_server_v1: ' + cip_common_nbos_server_v1 | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'inbound_channel_adc_hosts_for_nbos_adc_adapter_queue: ' + inbound_channel_adc_hosts_for_nbos_adc_adapter_queue | split(',') | reject('match', '^$') | unique | join(',') }}"
        - "{{ 'CIPDB_HOST: ' + CIPDB_HOST | split(',') | reject('match', '^$') | unique | join(',') }}"
      loop_control:
        loop_var: subsystem_mapping

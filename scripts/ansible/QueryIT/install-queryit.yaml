- name: Query IT Installation
  hosts: queryit
  become: yes # Run tasks with root privileges
  vars:
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - "{{ comm_config_file }}"
        - ./config-params.yml

    - name: Copy Config File
      copy:
        src: "../Coop/coop-config.ini"
        dest: "{{ installer_path }}"
        remote_src: false
        group: abinitio
      become_user: "{{ functional_user }}"

    - name: Read Coop Configuration File
      slurp:
        src: "{{ installer_path }}/coop-config.ini"
      register: coop_config_file_content

    - name: Parse Coop Configuration Values
      set_fact:
        coop_config_values: "{{ (coop_config_file_content['content'] | b64decode).split('\n') | map('trim') }}"
      register: parsed_config


    - name: Read Installation Directory value from config
      set_fact:
        destination: "{{ coop_config_values | select('match', '^destination=(.*)') | map('regex_replace', '^destination=(.*)', '\\1') | first }}"
        app_hub_dest: "{{ coop_config_values | select('match', '^app_hub_dest=(.*)') | map('regex_replace', '^app_hub_dest=(.*)', '\\1') | first }}"
    
    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Creating Query>It Sandbox
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create sandbox and UI directory
      shell: |
        sudo mkdir -p {{ sandbox_root }}/queryit
        sudo mkdir -p {{ data_root_path }}/queryitdata
        sudo chown -R {{ item }}:abinitio {{ data_root_path }}
      loop:
        - "{{ functional_user }}"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Installing ABSQL .......
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Copy files to remote host
      copy:
        src: "{{ destination }}/abinitio-V{{ coop_version }}/lib/absql/absql.tar.gz"
        dest:  "{{ sandbox_root }}"
        remote_src: true
        group: abinitio
      become_user: "{{ functional_user }}"

    - name: Untar Files
      ansible.builtin.command: "tar xvf {{ sandbox_root }}/absql.tar.gz -C {{ sandbox_root }}"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output
    
    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Installing Query>IT .......
        state: present
      delegate_to: localhost
      no_log: true
      become: false
        
    - name: Install QueryIT
      ansible.builtin.command: 
         cmd: sh -c "source /etc/profile && ./config-absql-sandbox.ksh -sandbox {{ sandbox_root }}/queryit -datadir {{ data_root_path }}/queryitdata -password {{ query_it_en_passwd }} -yes"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/absql/bin"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Running Query>IT Service
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Start QueryIT
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - "ab-qi service start"
        - "ab-qi service status"
        - air sandbox parameter -basedir . common -common {{ sandbox_root }}/abinitio/cip/private_internal
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/queryit"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Overwriting Query>IT Parameters in CIP 
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Set Query IT Params in CIP
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
       - air lock set -object /Projects/abinitio/cip/private_internal/dev.pset
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Write configuration pset dev for cip_private sandbox
      copy:
        dest: "{{ sandbox_root }}/abinitio/cip/private_internal/dev.pset"
        content: |     
          CIP_COMMON_QUERY_IT_SANDBOX@||||{{ sandbox_root }}/queryit       
          CIP_COMMON_QUERY_IT_DB_USERNAME@||||{{ functional_user }}
          CIP_COMMON_QUERY_IT_DB_PASSWORD@||||{{ query_it_en_passwd }}
      become_user: "{{ functional_user }}"

    - name: Add QueryIt information in global apphubrc
      lineinfile:
        path: "{{ app_hub_dest }}/config/apphubrc"
        line: |
          AB_SQL_INSTANCES : queryit
          AB_SQL_INSTANCE_PATH @ queryit : {{ sandbox_root }}/queryit

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Configure QueryIt Data sources
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Configure QueryIt Data sources and publish QueryIT to AG
      ansible.builtin.copy:
        content: |
          #!/bin/ksh
          source {{ sandbox_root }}/abinitio/cip/private_internal/ab_project_setup.ksh {{ sandbox_root }}/abinitio/cip/private_internal
          cd {{ sandbox_root }}/queryit
          ab-qi add dataspace ai_mfs -data_source_kind mfile -url
          ab-qi add schema cip
          ab-qi add datasource cip.subscriber_profile -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_lookup_query.mp -url mfile:${CIP_COMMON_LOCAL_MFS_LOOKUP} -record_format_file ${CIP_COMMON_DML}/queryit/subscriber_profile.dml
          ab-qi add datasource cip.audit_campaign -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_audit_query.mp -url mfile:${CIP_COMMON_LOCAL_MFS}/audit/campaign -record_format_file ${CIP_COMMON_DML}/queryit/audit_campaign.dml
          ab-qi add datasource cip.white_list -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_lookup_query.mp -url mfile:${CIP_COMMON_LOCAL_MFS_LOOKUP} -record_format_file ${CIP_COMMON_DML}/queryit/white_list.dml
          ab-qi add datasource cip.campaign_status -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_campaign_status_query.mp -url file:${CIP_COMMON_LOCAL_SERIAL}/campaign_status -record_format_file ${CIP_COMMON_DML}/queryit/campaign_status.dml
          ab-qi add datasource cip.campaign_definition -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_lookup_query.mp -url file:${CIP_COMMON_LOCAL_SERIAL_LOOKUP} -record_format_file ${CIP_COMMON_DML}/queryit/campaign_definition.dml
          ab-qi add datasource cip.audit_subscriber -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_audit_query.mp -url mfile:${CIP_COMMON_LOCAL_MFS}/audit/subscriber -record_format_file ${CIP_COMMON_DML}/queryit/audit_subscriber.dml
          ab-qi add datasource cip.audit_error -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_audit_query.mp -url mfile:${CIP_COMMON_LOCAL_MFS}/audit/error -record_format_file ${CIP_COMMON_DML}/queryit/audit_error.dml
          ab-qi add datasource cip.audit_outboundoffer -kind subgraph_advanced -subgraph_path ${CIP_COMMON_COMPONENTS}/queryit/cip_audit_query.mp -url mfile:${CIP_COMMON_LOCAL_MFS}/audit/outboundoffer -record_format_file ${CIP_COMMON_DML}/queryit/audit_outboundoffer.dml
          ab-qi ag config -pubid {{ ag_user }} -pubpass {{ ag_password }} -url {{ ag_url }} -instance queryit
          ab-qi ag publish
          ab-qi ag enable
        dest: "{{ installer_path }}/configure_queryit.ksh"
        mode: "0755"
        owner: "{{ functional_user }}"
        group: abinitio

    - name: Create directory hierarchy and set ownership
      shell: |
        {{ installer_path }}/source_and_run.sh {{ installer_path }}/configure_queryit.ksh > configure_queryit.ksh.log 2>&1
      become_user: "{{ functional_user }}"

    - name: checkin dev.pset
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - air project import /Projects/abinitio/cip/private_internal -basedir {{ sandbox_root }}/abinitio/cip/private_internal -files dev.pset
      register: command_output
      become_user: "{{ functional_user }}"

- name: Assign Query>it User Role in AG
  hosts: ag
  become: yes 
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - "{{ comm_config_file }}"     

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Assing Query>it Roles to Web App user
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create AG User Feeds Directory
      ansible.builtin.file:
        path: "{{ apps_root_path }}/abinitio/ag_user_feeds/queryit"
        state: directory
        group: abinitio
      become_user: "{{ functional_user }}"

    - name: Copy Queryit Feed File and User CSV for QueryIT
      copy:
        src: "{{ item }}"
        dest: "{{ apps_root_path }}/abinitio/ag_user_feeds/queryit"
        remote_src: false
        group: abinitio
      with_items:
        - ./AGPrincipalRole.csv
        - ./QueryitCreateUserGroup.feed
      become_user: "{{ functional_user }}" 

    - name: update QueryitCreateUserGroup.feed
      lineinfile:
        path: "{{ apps_root_path }}/abinitio/ag_user_feeds/queryit/QueryitCreateUserGroup.feed"
        line: |
          FILE_LIST: {{ apps_root_path }}/abinitio/ag_user_feeds/queryit/*.csv
        state: present
      become_user: "{{ functional_user }}"
    
    - name: Setup User
      shell: |
        source /etc/profile
        source {{ apps_root_path }}/abinitio/abinitio-deployment/ag/authgateway/config/import.profile
        export AB_AG_CONN_PARAMS="$AB_AG_CONN_PARAMS -u {{ ag_user }} -p {{ ag_password }}"
        ag-import feed save {{ apps_root_path }}/abinitio/ag_user_feeds/queryit/QueryitCreateUserGroup.feed
        ag-import run -feed "QueryitCreateUserGroup" -progress -approve
      become_user: "{{ functional_user }}"   

- name: Assign Query>it User Role in AG
  hosts: queryit
  become: yes 
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - "{{ comm_config_file }}"      

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Verifying AG connection with Query>it
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: check ag connection for queryit
      shell: |
        source /etc/profile
        cd {{ sandbox_root }}/queryit
        ab-qi ag auth_user {{ web_app_user }} {{ web_app_user }}
      become_user: "{{ functional_user }}"

  handlers:
    - name: Reload Profile
      shell: source /etc/profile  # Command to reload the profile

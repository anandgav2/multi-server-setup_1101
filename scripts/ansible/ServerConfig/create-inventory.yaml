- name: Configure EC2 Instance
  hosts: localhost
  become: false
  vars:
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
    use_existing_servers: "{{ lookup('env', 'USE_EXISTING_SERVERS').split(',') | first}}"
    use_existing_ag: "{{ lookup('env', 'USE_EXISTING_AG').split(',') | first}}"

  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"   

    - name: SET pem path blank
      set_fact:
        pem_file: ""

    - name: Read configuration and host alias files
      set_fact:
        functional_user: "ec2-user"
        pem_file: "{{ ansible_env.PWD | dirname | dirname }}/terraform/aws-cip-key-multi.pem"
      when: use_existing_servers == False

    - name: Delete Inventory (if it exists)
      shell: |
        rm -f ../../terraform/inventory.yml
        touch ../../terraform/inventory.yml
      ignore_errors: yes

    - name: Write Initial Lines
      lineinfile:
        path: ../../terraform/inventory.yml
        line: |
          aws-cip:
            hosts:

    - name: Read configuration and host alias files
      set_fact:  
        server_config: "{{ (lookup('file', '{{ installer_path }}/cip_setup_server_config.yml')).split('\n') }}"
        host_alias: "{{ (lookup('file', '{{ installer_path }}/host_alias.txt')).split('\n') }}"

    - name: Execute Python Code
      command: python3 read-configs.py "{{ host_alias }}" "{{ server_config }}" "{{ functional_user }}" "{{ pem_file }}"
      register: output

    - name: Write Web Apps and Subsystems
      lineinfile:
        path: ../../terraform/inventory.yml
        line: |
          {{ output.stdout }}

    - name: Write Web Apps and Subsystems for USE_EXISTING_AG == True
      lineinfile:
        path: ../../terraform/inventory.yml
        line: |
          # Use existing AG
              ag:
                ansible_host: {{ ag_import_host_ip }}
                ansible_user: {{ ag_import_ssh_user }}
              {% if ag_import_ssh_password is defined %}
                ansible_password: {{ ag_import_ssh_password}}
              {% endif %}
              {% if ag_import_ssh_private_key_file_path is defined %}
                ansible_ssh_private_key_file: {{ ag_import_ssh_private_key_file_path }}
              {% endif %}
      when: use_existing_ag == True

    
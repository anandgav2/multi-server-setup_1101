- name: Stop Apps
  hosts: 
    - server*
  become: yes # Run tasks with root privileges

  vars:
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"

  tasks:
    - name: Load CIP Config parameters
      include_vars:
        file: ../CIP/config-params.yml

    - name: Load CIP Config parameters
      include_vars:
        file: ../cip_common_setup.yml

    - name: Load Global config parameters
      include_vars:
        file: "{{ installer_path }}/cip_setup_automation.yml"

    - name: Stop CIP Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh forced_stop all"
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"

    - name: Pause for 5 seconds
      pause:
        seconds: 5

    - name: Abandon Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh abandon all"
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: Create StopCIP Expect File
      ansible.builtin.copy:
        content: |
          #!/usr/bin/expect -f

          set timeout 20

          set confirmation "Y"

          cd "{{ cip_base_path }}/ui/web/"

          spawn npm run stopcip

          expect "Stop Y/N? :"

          send  "$confirmation\r"

          interact
        dest: "{{ cip_base_path }}/ui/web/stop_cip.exp"
        mode: "0755"
        owner: "{{ functional_user }}"
      ignore_errors: true

    - name: StopCIP
      shell: |
        #! bin/bash
        echo "Stopping CIP UI..."
        source /etc/profile
        expect {{ cip_base_path }}/ui/web/stop_cip.exp
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Stop QueryIt Instance
      ansible.builtin.command:
        cmd: sh -c "source /etc/profile && ab-qi service stop"
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true
      args:
        chdir: "{{ cip_base_path }}/queryit"

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy Control Center Application
      expect:
        command: sh -c "source /etc/profile && ab-app destroy controlcenter"
        chdir: "{{ installer_path }}"
        responses:
          'Really destroy controlcenter\? \(yes\/no\) \[no\]:' : 'yes'
        timeout: 60
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy Control Center DB
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-db destroy OPDB
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy Cafe Application
      expect:
        command: sh -c "source /etc/profile && ab-app destroy cipcafe"
        chdir: "{{ installer_path }}"
        responses:
          'Really destroy cipcafe\? \(yes\/no\) \[no\]:' : 'yes'
        timeout: 120
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy CIP DB
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-db destroy cipdb
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy AG Application
      expect:
        command: sh -c "source /etc/profile && ab-app destroy authgateway"
        chdir: "{{ installer_path }}"
        responses:
          'Really destroy authgateway\? \(yes\/no\) \[no\]:' : 'yes'
        timeout: 120
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy AG DB
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-db destroy authgateway
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Shutdown  Repository
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh air repository shutdown"
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Destroy repository
      expect:
        command: sh -c "{{ installer_path }}/source_and_run.sh air repository destroy"
        responses:
          'Are you sure you want to do this \(yes\/no\)\?' : 'yes'
        timeout: 30
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Shutdown  Daemon
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-cinfo-util shutdown"
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs 
      debug:
         var: command_output

    - name: Shutdown Abinitio client
      ansible.builtin.command: "/var/abinitio/data/abkc/abkcd stop"
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true


    - name: Print logs
      debug:
         var: command_output

    - name: Stop Bridge
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-bridge stop
        - ab-bridge status
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Stop Reporter
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-reporter stop
        - ab-reporter status
      register: command_output
      become_user: "{{ functional_user }}"
      ignore_errors: true

    - name: Print logs
      debug:
         var: command_output

    - name: Delete root directories
      shell: |
        sudo rm -rf {{ installer_path }}
        sudo rm -rf {{ data_root_path }}/eme/cipeme
        sudo rm -rf {{ data_root_path }}/sand/appconfdir
        sudo rm -rf {{ data_root_path }}/cip
        sudo rm -rf {{ apps_root_path }}
        sudo rm -rf {{ sandbox_root }}/{{functional_user}}
        sudo rm -rf {{ a360_root }}
        sudo rm -rf {{ ab_application_hub }}
        sudo rm -rf {{ ab_home_dir }}
        sudo rm -rf {{ ab_work_dir }}
        sudo rm -rf {{ ab_data_dir }}
        sudo rm -rf /home/{{ functional_user }}/.abinitiorc
      loop:
        - "{{ functional_user }}"
      ignore_errors: true

- name: Destroy Stage
  hosts:
    - server*
  become: yes # Run tasks with root privileges

  vars:
    stage: "None"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"

  tasks:
    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - "{{ comm_config_file }}"
        
    - name: Destroying A360 work
      block:
        - name: Destroy DB's and Repo
          ansible.builtin.command: "{{ a360_root }}/bin/env.sh {{ item }}"
          with_items:
            ab-db destroy act_mhub
            ab-db destroy ag
            air repository shutdown
            air repository destroy
            ab-cinfo-util shutdown
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

	- name: Kill a360 processes
          shell: |
            sudo lsof -i -P -n | grep LISTEN | grep {{ act_base_port_prefix }} | awk '{ print $2 }' | sort | uniq | sudo xargs kill
            sudo ps -Af | grep {{ a360_root }} | grep -v "grep" | awk '{ print $2 }' | sort | uniq | sudo xargs kill
          register: command_output
	  loop:
            - "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output
	    
        - name: Delete root directories
          shell: |
            sudo rm -rf {{ installer_path }}
            sudo rm -rf {{ a360_root }}
            sudo rm -rf {{ apps_root_path }}
            sudo rm -rf {{ data_root_path }}/sand
            sudo rm -rf /usr/local/abinitio
            sudo rm -rf /var/abinitio/*
          register: command_output
	  loop:
            - "{{ functional_user }}"
          ignore_errors: true

	- name: Print logs
          debug:
            var: command_output
	    
        - name: Stop Bridge
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-bridge stop
            - ab-bridge status
          register: command_output
          become_user: abinitio
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Stop Reporter
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-reporter stop
            - ab-reporter status
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
          var: command_output
      
      when: "stage=='a360_install' and ab_host_alias == hostvars['a360'].ab_host_alias"
      
    - name: Destroying Co>op work
      block:
        - name: Shutdown  Daemon
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-cinfo-util shutdown"
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Shutdown Abinitio client
          ansible.builtin.command: "/var/abinitio/data/abkc/abkcd stop"
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Stop Bridge
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-bridge stop
            - ab-bridge status
          register: command_output
          become_user: abinitio
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Stop Reporter
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-reporter stop
            - ab-reporter status
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Remove coop-config.ini file
          ansible.builtin.file:
            path: "{{ installer_path }}/coop-config.ini"
            state: absent

        - name: Remove coop-config.ini file
          ansible.builtin.file:
            path: "{{ installer_path }}/coop-config.ini"
            state: absent

        - name: Find the Installer Tar
          find:
            paths: "{{ installer_path }}"
            patterns: "AbInitio*{{ coop_version }}*.*"
          register: found_files
          become: false

        - name: Display  File List
          ansible.builtin.debug:
            var: found_files

        - name: Remove coop tar file
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ found_files.files }}"
          become_user: "{{ functional_user }}"
      when: "stage=='coop_install' and ab_host_alias != hostvars['a360'].ab_host_alias"

    - name: Destroying QueryIt
      block:
        - name: Kill a360 processes
          shell: |
            sudo rm -rf {{ cip_base_path }}/queryit
            sudo sudo rm -rf {{ data_root_path }}/cip/serial/abinitio/queryitdata/
          register: command_output
	  loop:
            - "{{ functional_user }}"
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Stop QueryIt Instance
          ansible.builtin.command:
            cmd: sh -c "source /etc/profile && ab-qi service stop"
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
          args:
            chdir: "{{ cip_base_path }}/queryit"
	    
        - name: Print logs
          debug:
             var: command_output
      when: "stage=='Install QueryIt' and ab_host_alias != hostvars['a360'].ab_host_alias"
      
    - name: Destroy ADC cluster
      block:
        - name: stop and destroy adc lobby
          shell: |
              source /etc/profile
              cd {{ cip_base_path }}/private_internal/run
              adc lobby stop
              adc lobby destroy
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: True

        - name: Delete adc folder from CIP_COMMON_LOCAL_SERIAL_LOOKUP
          shell: |
              cd {{ cip_base_path }}/private_internal
              ksh
              . ./ab_project_setup.ksh .
              cd $CIP_COMMON_LOCAL_SERIAL_LOOKUP
              rm -rf adc
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: True
      when: "stage=='adc' and ab_host_alias != hostvars['nbos_adapter'].ab_host_alias"

    - name: Destroy EME
      block:
        - name: Shutdown  Repository
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh air repository shutdown"
          register: "{{ functional_user }}"
          become_user: abinitio
          ignore_errors: true

        - name: Print logs
          debug:
            var: command_output

        - name: Destroy repository
          expect:
            command: sh -c "{{ installer_path }}/source_and_run.sh air repository destroy"
              responses:
                'Are you sure you want to do this \(yes\/no\)\?' : 'yes'
          timeout: 30
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	  
	      - name: Print logs
          debug:
            var: command_output
            
	      - name: Delete root directories
          shell: |
            sudo rm -rf {{ data_root_path }}/eme/cipeme
          ignore_errors: true
      when: "stage=='eme' and ab_host_alias != hostvars['eme'].ab_host_alias"

    - name: Stop CIP UI
      block:
        - name: Create StopCIP Expect File
          ansible.builtin.copy:
            content: |
              #!/usr/bin/expect -f
	    
              set timeout 20
	    
              set confirmation "Y"
	    
              cd "{{ cip_base_path }}/ui/web/"
	    
              spawn npm run stopcip
	    
              expect "Stop Y/N? :"
	    
              send  "$confirmation\r"
	    
              interact
            dest: "{{ cip_base_path }}/ui/web/stop_cip.exp"
            mode: "0755"
            owner: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: StopCIP
          shell: |
            #! bin/bash
            echo "Stopping CIP UI..."
            source /etc/profile
            expect {{ cip_base_path }}/ui/web/stop_cip.exp
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: Print logs
          debug:
             var: command_output
      when: "stage=='cipui' and ab_host_alias != hostvars['cipui'].ab_host_alias"

    - name: Destroy Control Center
      block:
        - name: Destroy Control Center Application
          expect:
            command: sh -c "source /etc/profile && ab-app destroy controlcenter"
            chdir: "{{ installer_path }}"
            responses:
              'Really destroy controlcenter\? \(yes\/no\) \[no\]:' : 'yes'
            timeout: 60
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: Print logs
          debug:
             var: command_output
	    
        - name: Destroy Control Center DB
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-db destroy OPDB
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: Print logs
          debug:
             var: command_output
      when: "stage=='cc' and ab_host_alias != hostvars['cc'].ab_host_alias"

    - name: Destroy Cafe
      block:
      - name: Destroy Cafe Application
        expect:
          command: sh -c "source /etc/profile && ab-app destroy cipcafe"
          chdir: "{{ installer_path }}"
          responses:
            'Really destroy cipcafe\? \(yes\/no\) \[no\]:' : 'yes'
          timeout: 120
        register: command_output
        become_user: "{{ functional_user }}"
        ignore_errors: true
	  
      - name: Print logs
        debug:
           var: command_output
      when: "stage=='cafe' and ab_host_alias != hostvars['cafe'].ab_host_alias"
      
    - name: Destroy AG
      block:
        - name: Destroy AG Application
          expect:
            command: sh -c "source /etc/profile && ab-app destroy authgateway"
            chdir: "{{ installer_path }}"
            responses:
              'Really destroy authgateway\? \(yes\/no\) \[no\]:' : 'yes'
            timeout: 120
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: Print logs
          debug:
             var: command_output
	    
        - name: Destroy AG DB
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-db destroy authgateway
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: Print logs
          debug:
             var: command_output
      when: "stage=='ag' and ab_host_alias != hostvars['ag'].ab_host_alias"  
      
    - name: Destroy CIP DB
      block:
        - name: Destroy CIP DB
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - ab-db destroy cipdb
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: true
	    
        - name: Print logs
          debug:
             var: command_output
      when: "stage=='cip' and ab_host_alias != hostvars['cipdb'].ab_host_alias"  


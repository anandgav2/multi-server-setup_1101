- name: start CIP services
  hosts: cip_instance*
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"  
        - "{{ comm_config_file }}"
        - "{{ installer_path }}/cip_setup_server_config.yml"
        - "{{ installer_path }}/installer-versions.yml"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Starting CIP Subsystems
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Start CIP-Utility Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start utility"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"
    
    - name: Pause for 120 seconds
      pause:
        seconds: 120

    - name: Start CIP-Control Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start control_subsystem"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"
    
    - name: Pause for 120 seconds
      pause:
        seconds: 120

    - name: Start CIP-Enrich, Detect Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start enrichment_subsystem"
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start detect_subsystem"
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start collect_event_subsystem"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"
    
    - name: Pause for 60 seconds
      pause:
        seconds: 60

    - name: Start CIP-ContactPolicy, Communication and Fulfillment Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start contact_policy_subsystem"
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start communication_subsystem"
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start fulfillment_subsystem"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"
    
    - name: Pause for 60 seconds
      pause:
        seconds: 60

    - name: Touch Required lookups in NBOS data nodes
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        cd $(air sandbox eval . CIP_COMMON_LOCAL_SERIAL_LOOKUP)
        dt=$(date +%Y%m%d%H%M%S)
        touch nbos_subscriber_profile.${dt}.idx
        touch nbos_subscriber_profile.${dt}.dat
        touch nbos_location_to_offers.${dt}.idx
        touch nbos_location_to_offers.${dt}.dat
        touch nbos_offerset_offers.${dt}.idx
        touch nbos_offerset_offers.${dt}.dat
        touch nbos_algo_offers.${dt}.idx
        touch nbos_algo_offers.${dt}.dat
        touch offer_inbound_lookup.${dt}.dat
        touch offer_inbound_lookup.${dt}.idx
        touch offer_inbound_channel_alternate_id.${dt}.idx
        touch offer_inbound_channel_alternate_id.${dt}.dat
        touch benefit.V2.${dt}.dat
        touch benefit.V2.${dt}.idx
        ls -ltr *nbos*
      register: command_output
      become_user: "{{ functional_user }}"
      when: "'nbos_data' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"

    - name : print command_output
      debug: 
         var: command_output
      when: "'nbos_data' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"

    - name: Set NBOS subsystem job parameter
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox lock {{ cip_base_path }}/private_internal/pset/inbound_channel/nbos_start_services.pset
        - air sandbox parameter -path {{ cip_base_path }}/private_internal/pset/inbound_channel/nbos_start_services.pset CREATE_ADC_QUEUE True
      register: command_output
      become_user: "{{ functional_user }}"
      when: "'nbos_adapter' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"
   
    - name : Remove subscriber_profile_format empty file
      shell: |
          source /etc/profile
          cd {{ cip_base_path }}/private_internal/
          cd $(air sandbox eval . CIP_COMMON_LOCAL_SERIAL_LOOKUP)
          to_be_delete=$(ls subscriber_profile_format* | grep -v V2)
          rm $to_be_delete
      register: command_output
      become_user: "{{ functional_user }}"
      when: "'nbos_data' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list or 'nbos_adapter' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"
    
    # temporary added job rm_adc_cluster_host_lookup_files.pset , need to remove it once permanent fix comes.
    - name: Run NBOS here for CIP 3
      block:

        - name: Run NBOS Subsystem job
          ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
          with_items:
            - air sandbox run "{{ cip_base_path }}/private_internal/pset/inbound_channel/build_nbos_lookup.pset" -USE_ALGO_OFFER False
            - sleep 60
            - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start nbos"
          register: command_output
          become_user: "{{ functional_user }}"
          args:
            chdir: "{{ cip_base_path }}/private_internal/run"
          when: "'nbos_adapter' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"
          ignore_errors: True

        - name : print command_output
          debug: 
             var: command_output
          when: "'nbos_adapter' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"

        - name: Check if cluster is operational or not
          ansible.builtin.command: '{{ installer_path }}/source_and_run.sh adc lobby status'
          register: command_output
          become_user: "{{ functional_user }}"
          args:
            #chdir: "{{ cip_base_path }}/private_internal/run/cip/{{ ab_host_alias }}.control"
            chdir: "{{ cip_base_path }}/private_internal/run"
          until: command_output.stdout == "operational"
          retries: 10
          delay: 10
          when: "'nbos_adapter' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"

        - name: adc authentication
          shell: |
              source /etc/profile
              # cd {{ cip_base_path }}/private_internal/run/cip/{{ ab_host_alias }}.control
              cd {{ cip_base_path }}/private_internal/run
              adc auth create-user lobby admin -role adc-admin
              adc auth encrypted-password lobby admin $(m_password -unrestricted -password admin)
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: True
          when: "'nbos_adapter' in vars[ab_host_alias + '_config'].split(',') | map('trim') | list"

        - name: print logs
          debug:
             var: command_output
      when: cip_version.split('-')[0] | int < 4
      
    - name: Pause for 60 seconds
      pause:
        seconds: 60

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Verifying if the CIP Subsystems are UP on {{ ansible_hostname }} host
        state: present
      delegate_to: localhost
      no_log: true
      become: false
    
    - name: Check Status of Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh status all"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ cip_base_path }}/private_internal/run"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

  handlers:
    - name: Reload Profile
      shell: source /etc/profile  # Command to reload the profile

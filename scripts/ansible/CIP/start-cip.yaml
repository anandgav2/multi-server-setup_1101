- name: start CIP services
  hosts: cip_instance*
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"  


    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Running Environment and DB setup Jobs
        state: present
      delegate_to: localhost
      no_log: true
      become: false 

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: create and upgrade CIPDB
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - air sandbox run ../pset/utility/create_environment/create_all_databases.pset
        - air sandbox run ../pset/utility/create_environment/upgrade_all_databases.pset
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"
      when: inventory_hostname == 'cip_instance_1'

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Starting CIP Subsystem
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Start CIP-Utility Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ sandbox_root }}/abinitio/cip/private_internal/bin/cip-control.ksh start utility"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"
    
    - name: Pause for 120 seconds
      pause:
        seconds: 120

    - name: Start CIP-Control Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ sandbox_root }}/abinitio/cip/private_internal/bin/cip-control.ksh start control_subsystem"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"
    
    - name: Pause for 120 seconds
      pause:
        seconds: 120

    - name: Start CIP-Enrich, Detect Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ sandbox_root }}/abinitio/cip/private_internal/bin/cip-control.ksh start enrichment_subsystem detect_subsystem collect_event_subsystem"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"
    
    - name: Pause for 60 seconds
      pause:
        seconds: 60

    - name: Start CIP-ContactPolicy, Communication and Fulfillment Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ sandbox_root }}/abinitio/cip/private_internal/bin/cip-control.ksh start contact_policy_subsystem communication_subsystem fulfillment_subsystem"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"
    
    - name: Pause for 60 seconds
      pause:
        seconds: 60

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Verifying if the CIP Subsystem is UP
        state: present
      delegate_to: localhost
      no_log: true
      become: false
    
    - name: Check Status of Subsystems
      ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
      with_items:
        - "{{ sandbox_root }}/abinitio/cip/private_internal/bin/cip-control.ksh status all"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal/run"

    - name: Display Status
      ansible.builtin.debug:
        var: command_output

  handlers:
    - name: Reload Profile
      shell: source /etc/profile  # Command to reload the profile

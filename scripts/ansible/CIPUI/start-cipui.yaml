- name: CIP-UI Installation
  hosts: cipui
  become: yes # Run tasks with root privileges

  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
#    cip_instance_localhost_ip: "127.0.0.1"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"

  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ comm_config_file }}"
        - "../CIP/config-params.yml"
        - "{{ installer_path }}/cip_setup_automation.yml"
        -  "../QueryIT/config-params.yml"

    - name: Set a new parameter based on an existing parameter
      set_fact:
        json_file: "{{ sandbox_root }}/abinitio/cip/ui/web/config/default.json"
        web_root_path: "{{ sandbox_root }}/abinitio/cip/ui/web"
        query_it_passwd: "{{ query_it_en_passwd }}"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Creating ez_autosave directory and giving it required permissions
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create directory hierarchy and set ownership
      shell: |
        sudo mkdir -p "{{ sandbox_root }}/abinitio/ez_autosave"
        sudo chown -R {{ item }}:abinitio {{ sandbox_root }}/abinitio/ez_autosave
        sudo chmod 777 {{ sandbox_root }}/abinitio/ez_autosave
      loop:
        - "{{ functional_user }}"

    - name: get control server alias from cip_setup_server_config.yml
      shell: cat {{ installer_path }}/cip_setup_server_config.yml | grep control| head -1
      register: control_server_config_line
      become_user: "{{ functional_user }}"

    - name: set control server alias
      set_fact:
        control_server_alias: "{{ control_server_config_line.stdout | split('_') |first }}"
        
    - name: get control server alias line from host_alias.txt
      shell: cat {{ installer_path }}/host_alias.txt | grep {{ control_server_alias }} | head -1
      register: control_server_alias_line
      become_user: "{{ functional_user }}"
      
    - name: set control server
      set_fact:
        control_server: "{{ control_server_alias_line.stdout | split(' ') | last }}"
        
    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Updating CIP UI Json Config
        state: present
      delegate_to: localhost
      no_log: true
      become: false
        
    - name: "update CIP DB"
      command: >
        jq ".PostgressDB.database=\"{{cip_db_name}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update CIP DB Port"
      command: >
        jq ".PostgressDB.port=\"{{cip_db_port}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result
      
    - name: "update AG Port"
      command: >
        jq ".AuthGateway.port=\"{{ag_port}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update AG root"
      command: >
        jq ".AuthGateway.root_path=\"\/{{ag_root_path}}/\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Cafe Port"
      command: >
        jq ".AbCafeHost.port=\"{{cafe_port}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Cafe contextRoot"
      command: >
        jq ".AbCafeHost.contextRoot=\"\/{{cafe_root_path}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Cafe auth"
      command: >
        jq ".AbCafeHost.auth=\"{{cafe_user}}:{{cafe_password}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result
      
    - name: "update Segmentation protoFilePath"
      command: >
        jq ".Segmentation.protoFilePath=\"{{sandbox_root}}/abinitio/cip/cip_common/components/cip.proto\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result 

    - name: "update Segmentation mapFilePath"
      command: >
        jq ".Segmentation.mapFilePath=\"{{sandbox_root}}/abinitio/cip/cip_common/components/cip.map\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Segmentation breXfrFiles"
      command: >
        jq ".Segmentation.breXfrFiles=[]" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Segmentation autosaveRootDirectory"
      command: >
        jq ".Segmentation.autosaveRootDirectory=\"{{ sandbox_root }}/abinitio/cip/ez_autosave\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Segmentation testSandbox"
      command: >
        jq ".Segmentation.testSandbox=\"{{ sandbox_root }}/abinitio/cip/private_internal\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Segmentation queryitSandbox"
      command: >
        jq ".Segmentation.queryitSandbox=\"{{ sandbox_root }}/queryit\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Segmentation queryitUsername"
      command: >
        jq ".Segmentation.queryitUsername=\"{{ functional_user }}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Segmentation queryitPassword"
      command: >
        jq ".Segmentation.queryitPassword=\"{{ query_it_passwd }}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update HttpConfig port"
      command: >
        jq ".HttpConfig.port=\"29096\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update NBOSQueryService port"
      command: >
        jq ".NBOSQueryService.port=\"29078\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update SubscriberQueryService port"
      command: >
        jq ".SubscriberQueryService.port=\"29093\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update DeployWebService port"
      command: >
        jq ".DeployWebService.port=\"29095\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update ParseWebService port"
      command: >
        jq ".ParseWebService.port=\"29095\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update GraphWebService port"
      command: >
        jq ".GraphWebService.port=\"29095\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update Cafe Host"
      command: >
        jq ".AbCafeHost.host=\"{{cafe_host}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update AuthGateway Host"
      command: >
        jq ".AuthGateway.host=\"{{ag_host}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update DeploySSH Host"
      command: >
        jq ".DeploySSH.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update DeployWebService Host"
      command: >
        jq ".DeployWebService.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update GraphWebService Host"
      command: >
        jq ".GraphWebService.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update HttpConfig Host"
      command: >
        jq ".HttpConfig.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update KillSSH Host"
      command: >
        jq ".KillSSH.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update NBOSQueryService Host"
      command: >
        jq ".NBOSQueryService.host=\"{{ansible_host}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update ParseWebService Host"
      command: >
        jq ".ParseWebService.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update PostgressDB Host"
      command: >
        jq ".PostgressDB.host=\"{{ansible_host}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: "update SubscriberQueryService Host"
      command: >
        jq ".SubscriberQueryService.host=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result
      
    - name: "update UploadWhiteListFile remote_landing_ssh_hostname"
      command: >
        jq ".UploadWhiteListFile.remote_landing_ssh_hostname=\"{{control_server}}\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result
      
    - name: "update Platform Name"
      command: >
        jq ".Platform.name=\"CIP\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result

    - name: get remote_landing_directory
      shell: |
        source /etc/profile
        . ./ab_project_setup.ksh .
        echo ${PUBLIC_PROTOTYPE_SERIAL_HOME}/landing
      args:
        executable: /bin/ksh
        chdir: "{{ sandbox_root }}/abinitio/cip/private_internal"
      become_user: "{{ functional_user }}"
      register: command_output

    - name: Print logs
      debug:
         var: command_output

    - name: "update UploadWhiteListFile.remote_landing_directory"
      command: >
        jq ".UploadWhiteListFile.remote_landing_directory=\"{{ command_output.stdout_lines[0] }}/\"" "{{json_file}}"
      register: json_modify_result

    - name: Write updated JSON back to file
      ansible.builtin.copy:
        content: "{{ json_modify_result.stdout| from_json|to_nice_json}}"
        dest: "{{json_file}}"
      register: write_result
      
    - name: Display result
      ansible.builtin.debug:
        var: json_modify_result            
    
    - name: Untar localdbStarterPack.tar.gz
      ansible.builtin.command:
         cmd: "tar -xvf localdbStarterPack.tar.gz"
      register: command_output
      become_user: "{{ functional_user }}"
      args:
         chdir: "{{ web_root_path }}"
         
    #- name: Run CIP UI Configuration
    #  expect:
    #    command: "npm run first_modeB"
    #    chdir: "{{ web_root_path }}"
    #    responses:
    #       'Authorization Gateway Administrator': 'admin'
    #       'Would you like to store encrypted Database and SSH passwords \(Y/N\)? :' : 'Y'
    #       'Please enter the AG' : '80Sv1Uaudaan'
    #       'Query>It DB' : "{{ query_it_passwd }}"
    #       'Embedded CIP Database User': 'admin'
    #       'Embedded CIP Database Pass': 'admin'
    #       'Deployment SSH2 Username': 'abinitio'
    #       'Deployment SSH2 Password': 'abinitio'
    #    echo: yes
    #    timeout: 10
    #  register: command_output
    #  become_user: "{{ functional_user }}"
    #  
    #- name: Print CIP UI logs
    #  debug:
    #     var: command_output.stdout_lines

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Adding Subscriber Profile DML
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: add subscriber profile type into dml file
      lineinfile:
        line: "type subscriber_profile_t=subscriber_profile_payloaded_V1_t;"
        path: "{{ sandbox_root }}/abinitio/cip/cip_common/dml/queryit/qe_cms_audit_types.dml"
        state: present

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Runnig --> npm run first_modeB
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create Expect File
      ansible.builtin.copy:
        content: |
          #!/usr/bin/expect -f

          set timeout 20

          set ag_user "{{ ag_user }}"

          set ag_pass "{{ ag_password }}"

          set q_db_pass "{{ query_it_passwd }}"

          set store_pass "Y"

          set cip_db_user "{{ cip_db_user }}"

          set cip_db_pass "{{ cip_db_password }}"

          set ssh_user "{{ functional_user }}"

          set ssh_pass "{{ functional_user_password }}"

          set use_nbos_query "N"

          cd "{{ sandbox_root }}/abinitio/cip/ui/web/"

          spawn npm run first_modeB

          expect "Please enter the Authorization Gateway Administrator \(AG\) Username :"

          send  "$ag_user\r"

          expect "Please enter the AG Password :"

          send  "$ag_pass\r"

          expect "Please enter the Query>It DB Password :"

          send  "$q_db_pass\r"

          expect "Would you like to store encrypted Database and SSH passwords (Y/N) ? :"

          send  "$store_pass\r"

          expect "Please enter the Embedded CIP Database Username :"

          send  "$cip_db_user\r"

          expect "Please enter the Embedded CIP Database Password :"
          send  "$cip_db_pass\r"

          expect "Please enter the Deployment SSH2 Username :"
          send  "$ssh_user\r"

          expect "Please enter the Deployment SSH2 Password :"
          send  "$ssh_pass\r"

          expect "Do you use NBOS query (Y/N) ? :"
          send  "$use_nbos_query\r"

          interact
        dest: "{{ sandbox_root }}/abinitio/cip/ui/web/input.exp"
        mode: "0755"
        owner: "{{ functional_user }}"


    #- name: Run first_modeB
    #  ansible.builtin.command: 
    #    cmd: "expect ./input.exp"
    #  async: 120
    #  register: command_output
    #  become_user: "{{ functional_user }}"
    #  args:
    #    chdir: "{{ sandbox_root }}/abinitio/cip/ui/web"    

    - name: Run first_modeB
      shell: |
        #! bin/bash

        echo "starting CIP UI "

        source /etc/profile
     

        expect {{ sandbox_root }}/abinitio/cip/ui/web/input.exp

        echo "Done"

      register: command_output
      become_user: "{{ functional_user }}"

    - name: Print logs
      debug:
         var: command_output 

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Runnig --> npm run modeB - To bring UP CIP UI
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Run CIP UI
      ansible.builtin.command: 
        cmd: sh -c "source /etc/profile && npm run modeB > nohup.out 2>&1"
      async: 120
      register: command_output
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ sandbox_root }}/abinitio/cip/ui/web"     
         
    - name: Print CIP UI logs
      debug:
         var: command_output

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => CIP UI is running on 
                http://{{ ansible_host }}:32400
                cip_ui_user: {{ web_app_user }}
                cip_ui_password: {{ web_app_user }}

          => More Users Can be added to access CIPUI using AG
        state: present
      delegate_to: localhost
      no_log: true
      become: false   

- name: Assign CIP UI User Role in AG
  hosts: ag
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - "{{ comm_config_file }}"              

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Assigning WEB_APP_USER to Access CIP UI, Using AG
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create AG User Feeds Directory
      ansible.builtin.file:
        path: "{{ apps_root_path }}/abinitio/ag_user_feeds/cipui"
        state: directory
        group: abinitio
      become_user: "{{ functional_user }}"        

    - name: Copy CIPUI Feed File and User Excel for CIPUI
      copy:
        src: "{{ item }}"
        dest: "{{ apps_root_path }}/abinitio/ag_user_feeds/cipui"
        remote_src: false
        group: abinitio
      with_items:
        - ./AGPrincipalRole.csv
        - ./CIPUICreateUserGroup.feed
      become_user: "{{ functional_user }}"   
    
    - name: update CIPUICreateUserGroup.feed
      lineinfile:
        path: "{{ apps_root_path }}/abinitio/ag_user_feeds/cipui/CIPUICreateUserGroup.feed"
        line: |
          FILE_LIST: {{ apps_root_path }}/abinitio/ag_user_feeds/cipui/AGPrincipalRole.csv
        state: present
      become_user: "{{ functional_user }}"
    
    - name: Setup User
      shell: |
        source /etc/profile
        source {{ apps_root_path }}/abinitio/abinitio-deployment/ag/authgateway/config/import.profile
        export AB_AG_CONN_PARAMS="$AB_AG_CONN_PARAMS -u {{ ag_user }} -p {{ ag_password }}"
        ag-import feed save {{ apps_root_path }}/abinitio/ag_user_feeds/cipui/CIPUICreateUserGroup.feed
        ag-import run -feed "CIPUICreateUserGroup" -progress -approve
      become_user: "{{ functional_user }}"

- name: A360 - CIP Integration
  hosts: 
    - server*
    - a360*
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ comm_config_file }}"
        
    - name: Get Important Hosts
      set_fact:
        control_inv: "control"
        a360_inv: "a360_web"
        a360_servers:
          - "{{ a360_webapp_server }}"
          - "{{ a360_webapp_ip }}"
          - "{{ a360_kafka_boostrap_server }}"
          - "{{ a360_kafka_boostrap_ip }}"
          - "{{ a360_adc_server }}"
          - "{{ a360_adc_ip }}"

    - name: Get CIP hosts
      set_fact:
        cip_servers: "{{ cip_servers | default([]) + [ hostvars[item].ansible_hostname, hostvars[item].ansible_host ] }}"
      loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"

    - name: Get IMP variables from control server
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        air sandbox eval . CIP_COMMON_SERIAL
        air sandbox eval . CIP_COMMON_DEPLOY_WEB_PORT
        air sandbox eval . CIP_COMMON_LOCAL_SERIAL
        air sandbox eval . CIP_COMMON_SERIAL_LOOKUP
        air sandbox eval . CIP_COMMON_PRIVATE_DML
        echo $AB_HOME
      register: control_out
      become_user: "{{ functional_user }}"

    - name: Get IMP variables from A360 server
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        cd {{ exist_a360_root }}/sand/abinitio/act/main
        echo $AB_HOME
        air sandbox eval . ACT_API_MESSAGE_BUS_PROPERTIES_FILE
        echo {{ ansible_hostname }}
        air sandbox eval . ACT_API_ADC_LOOKUPS_STAGING_DIR
        air sandbox eval . AI_SERIAL
        air sandbox eval . ADC_WEBSERVER_PORT
        air sandbox eval . ACT_API_SERIAL_LOOKUP
        air sandbox eval . ACT_API_BASE_PORT
        air sandbox eval . ACT_API_HTTP_CONTEXT_ROOT
        air sandbox eval . KAFKA_BOOTSTRAP_SERVERS
        ab-app status | grep $(air sandbox eval . ACT_API_BASE_PORT) | awk -F ', ' '{print $1}' | awk -F ': ' '{print $2}'
      register: a360_out
      become_user: "{{ functional_user }}"

    - name: Get required Parameter values from A360 Server
      set_fact:
        a360_ab_home: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][0] }}"
        act_api_message_bus_properties_file: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][1] }}"
        a360_hostname: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][2] }}"
        act_api_adc_lookups_staging_dir: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][3] }}"
        a360_ai_serial: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][4] }}"
        adc_webserver_port: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][5] }}"
        act_api_serial_lookup: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][6] }}"
        act_api_base_port: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][7] }}"
        act_api_http_context_root: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][8] }}"
        kafka_bootstrap_servers: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][9] }}"
        a360_web_root: "{{ hostvars[a360_inv]['a360_out']['stdout_lines'][10] }}"

    - name: Get required Parameter values from CIP Server
      set_fact:
        cip_common_serial: "{{ hostvars[control_inv]['control_out']['stdout_lines'][0] }}"
        cip_common_deploy_web_port: "{{ hostvars[control_inv]['control_out']['stdout_lines'][1] }}"
        cip_common_local_serial: "{{ hostvars[control_inv]['control_out']['stdout_lines'][2] }}"
        cip_common_serial_lookup: "{{ hostvars[control_inv]['control_out']['stdout_lines'][3] }}"
        cip_common_private_dml: "{{ hostvars[control_inv]['control_out']['stdout_lines'][4] }}"
        cip_ab_home: "{{ hostvars[control_inv]['control_out']['stdout_lines'][5] }}"

    - name: Add A360 remote host and public IP entries to /etc/hosts - on CIP Servers
      lineinfile:
        path: /etc/hosts
        line: |
          {{ a360_webapp_ip + ' ' + a360_webapp_server }}
          {{ a360_kafka_boostrap_ip + ' ' + a360_kafka_boostrap_server }}
          {{ a360_adc_ip + ' ' + a360_adc_server }}
      when: inventory_hostname | match('^server')

    - name: Add CIP remote host and public IP entries to /etc/hosts - on A360 Servers
      lineinfile:
        path: /etc/hosts
        line: |
          {{ hostvars[item].ansible_default_ipv4.address + ' ' + hostvars[item].ansible_hostname }}
      loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"
      when: inventory_hostname | match('^a360')

    - name: Generate ENC Password A360 Servers
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh m_password -password {{ a360_ssh_password }} -unrestricted"
      register: command_output
      become_user: "{{ functional_user }}"
      when: inventory_hostname | match('^server')

    - name: Create A360 Hetro connection File - on CIP Servers
      lineinfile:
        path: "/home/{{ functional_user }}/.abinitiorc"
        line: | 
          AB_NODES @ A360 : {{ a360_servers | unique | join(' ') }}
          AB_USERNAME @ A360 : {{ a360_ssh_user }}
          AB_CONNECTION @ A360 : ssh
          AB_SSH_NEEDS_PASSWORD @ A360 : ture
          AB_ENCRYPTED_PASSWORD @ A360 : {{ command_output.stdout }}
          AB_HOME @ A360 : {{ a360_ab_home }}
        state: present
      become_user: "{{ functional_user }}"
      when: inventory_hostname | match('^server')

    - name: SSH into the server and accept key fingerprint for hetro connection
      expect:
        command: ssh {{ item }}
        responses:
          'Are you sure you want to continue connecting (yes/no/[fingerprint])?': "yes"
        timeout: 10
      become_user: "{{ functional_user }}"
      loop: "{{ a360_servers }}"
      ignore_errors: yes
      when: inventory_hostname | match('^server')

    - name: Generate ENC Password CIP Servers
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh m_password -password {{ functional_user_password }} -unrestricted"
      register: command_output
      become_user: "{{ functional_user }}"
      when: inventory_hostname | match('^server')

    - name: Create CIP Hetro connection File - on A360 Server
      lineinfile:
        path: "/home/{{ a360_ssh_user }}/.abinitiorc"
        line: | 
          AB_NODES @ CIP : {{ cip_servers | join(' ') }}
          AB_USERNAME @ CIP : {{ functional_user }}
          AB_CONNECTION @ CIP : ssh
          AB_SSH_NEEDS_PASSWORD @ CIP : ture
          AB_ENCRYPTED_PASSWORD @ CIP : {{ command_output.stdout }}
          AB_HOME @ CIP : {{ cip_ab_home }}
        state: present
        create: yes
      become_user: "{{ a360_ssh_user }}"
      when: inventory_hostname | match('^a360')

    - name: SSH into the server and accept key fingerprint for hetro connection
      expect:
        command: ssh {{ item }}
        responses:
          'Are you sure you want to continue connecting (yes/no/[fingerprint])?': "yes"
        timeout: 10
      become_user: "{{ a360_ssh_user }}"
      loop: "{{ cip_servers }}"
      ignore_errors: yes
      when: inventory_hostname | match('^a360')

    - name: Get A360 Sandbox Parameters - ACT_API_MESSAGE_BUS_PROPERTIES_FILE
      when: inventory_hostname == 'a360_web'
      shell: |
        cat {{ act_api_message_bus_properties_file }}
      register: command_output
      become_user: "{{ a360_ssh_user }}"

    - name: Kafka Bootstrap server properties
      when: inventory_hostname == 'a360_web'
      debug:
        var: command_output.stdout_lines

    - name: Generate ENC Password Act Portal
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh m_password -password {{ act_portal_password }} -unrestricted"
      register: command_output
      become_user: "{{ functional_user }}"
      when: ab_host_alias == hostvars['control'].ab_host_alias

    - name: Set A360 Parameters in CIP base pset
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal
        air sandbox lock {{ cip_base_path }}/private_internal/dev.pset
        air sandbox parameter -path dev.pset JAVA_HOME@act_api ${JAVA_HOME}
        air sandbox parameter -path dev.pset ACT_API_BASE_PORT@ '{{ act_api_base_port }}'
        air sandbox parameter -path dev.pset ACT_API_SERVICE_HOST@ {{ a360_hostname }}
        air sandbox parameter -path dev.pset ACT_API_HTTP_CONTEXT_ROOT@ '{{ act_api_http_context_root }}'
        air sandbox parameter -path dev.pset ACT_API_CUSTOMER360_ENTITY_NAME@ 'cip_customer'
        air sandbox parameter -path dev.pset ACT_API_CUSTOMER360_SUBSET_NAME@ 'subset_for_cip_inbound'
        air sandbox parameter -path dev.pset CIP_COMMON_ACT_PORTAL_HTTP_HOST@ {{ a360_hostname }}
        air sandbox parameter -path dev.pset CIP_COMMON_ACT_PORTAL_HTTP_PORT@ '{{ act_api_base_port }}'
        air sandbox parameter -path dev.pset CIP_COMMON_ACT_PORTAL_API_URLROOT@ '/{{ a360_web_root }}/api/act'
        air sandbox parameter -path dev.pset CIP_COMMON_ACT_PORTAL_USERNAME@ '{{ act_portal_username }}'
        air sandbox parameter -path dev.pset CIP_COMMON_ACT_PORTAL_PASSWORD_ENCRYPTED@ '{{ act_portal_password }}'
        air sandbox parameter -path dev.pset CIP_COMMON_CUSTOMER_360_SUBSET@ 'subset_for_cip_outbound'
        air sandbox parameter -path dev.pset CIP_COMMON_A360_KAFKA_TOPIC_PROPERTIES@ 'acks=-1
        bootstrap.servers={{ a360_kafka_boostrap_server }}:{{ kafka_bootstrap_servers.split(':')[1] }}
        transaction.timeout.ms=9000'
        air sandbox import . -files dev.pset
      become_user: "{{ functional_user }}"

## Add ET_A360_NOTIFICATION for CIP_COMMON_INTERNAL_EVENT_OVERRIDE_TYPE_LIST version > 4.1.0.36

    - name: Export CIP base pset
      when: inventory_hostname | match('^server')
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal
        air sandbox export . -files dev.pset -force
      become_user: "{{ functional_user }}"

    # - name: Set A360 Sandbox Parameters
    #   when: inventory_hostname  | match('^a360')
    #   shell: |
    #     source {{ exist_a360_root }}/bin/env.sh
    #     cd {{ exist_a360_root }}/sand/abinitio/act/main
    #     air sandbox parameter -path .sandbox.pset REJECT_MESSAGES_MORE_THAN_N_MINUTES_IN_FUTURE 5256000
    #   become_user: "{{ a360_ssh_user }}"

    # - name: Relaunch ADC Cluster
    #   when: inventory_hostname == 'a360_adc'
    #   shell: |
    #     source {{ exist_a360_root }}/bin/env.sh
    #     cd {{ exist_a360_root }}/sand/abinitio/act/main
    #     cd run/
    #     air sandbox run ../pset/shutdown_cluster.pset
    #     air sandbox run ../pset/launch_cluster.pset
    #   become_user: "{{ a360_ssh_user }}"

    - name: Create extractors directory and set ownership
      when: inventory_hostname == 'a360_web'
      file:
        path: "{{ exist_a360_root }}/ab-deployments/act_mhub/extractors/"
        state: directory
        recurse: yes
      become_user: "{{ a360_ssh_user }}"

    - name: Extract Metadata of Entity and Events
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/run
        air sandbox run  ../pset/utility/cip_extract_metadata_for_360.pset
      become_user: "{{ functional_user }}"

    - name: Copy extracted_dmls.tar.gz to A360 Server
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        m_cp {{ cip_common_serial }}/extracted_dml/extracted_dmls.tar.gz //{{ hostvars['a360_web'].ansible_hostname }}/{{ exist_a360_root }}/ab-deployments/act_mhub/extractors/
      become_user: "{{ functional_user }}"

    - name: Copy CipCustomer_Setup to extractors directory
      when: inventory_hostname == 'a360_web'
      copy:
        src: "{{ exist_a360_root }}/release_pkg/application/extractors/CipCustomer_Setup"  
        dest: "{{ exist_a360_root }}/ab-deployments/act_mhub/extractors/"
        mode: "0755" 
        remote_src: yes
      become_user: "{{ a360_ssh_user }}"

    - name: Register A360 Extractors
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        source {{ exist_a360_root }}/ab-deployments/act_mhub/config/import.profile
        cd {{ exist_a360_root }}/ab-deployments/act_mhub/extractors/
        mh-import register extractors
      register: command_output
      become_user: "{{ a360_ssh_user }}"

    - name: Check A360 Extractors are Registered Output
      when: inventory_hostname == 'a360_web'
      debug:
        var: command_output.stdout_lines

    - name: Import the Extracted Metadata to A360
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        source {{ exist_a360_root }}/ab-deployments/act_mhub/config/import.profile
        export AB_MHUB_CONN_PARAMS="$AB_MHUB_CONN_PARAMS -u {{ act_portal_username }} -p {{ act_portal_password }}"
        cd {{ exist_a360_root }}/ab-deployments/act_mhub/extractors/CipCustomer_Setup
        sed -i "s#METADATA_TAR_FILE:.*#METADATA_TAR_FILE: {{ exist_a360_root }}/ab-deployments/act_mhub/extractors/extracted_dmls.tar.gz#g" CIP-Metadata-Import.feed
        mh-import feed save CIP-Metadata-Import.feed
        mh-import run -feed "CIP Metadata Import" -progress -approve
      register: command_output
      become_user: "{{ a360_ssh_user }}"

    - name: Check MH Import Feed Output
      when: inventory_hostname == 'a360_web'
      debug:
        var: command_output.stdout_lines

    - name: Run an A360 deployment
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        curl -X POST "http://{{ a360_hostname }}:{{ act_api_base_port }}/{{ a360_web_root }}/api/act/deploy/start" -H "Content-Type: application/json" -d "{}" -u {{ act_portal_username }}:{{ act_portal_password }}
        sleep 30
      register: response
      become_user: "{{ a360_ssh_user }}"

    - name: Check A360 deployment Output
      when: inventory_hostname == 'a360_web'
      debug:
        var: response.stdout_lines

    # - name: Clean Up Unwanted Lookups
    #   when: inventory_hostname  | match('^a360')
    #   shell: |
    #     cd {{ act_api_adc_lookups_staging_dir }}
    #     rm -rf act_customer*
    #   become_user: "{{ a360_ssh_user }}"

    - name: Run Lookup Reload
      when: inventory_hostname == 'a360_adc'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        cd {{ exist_a360_root }}/sand/abinitio/act/main/run
        air sandbox run ../pset/reload_lookups.pset
        adc lobby lookups state
      register: command_output
      become_user: "{{ a360_ssh_user }}"

    - name: Display ADC status
      when: inventory_hostname == 'a360_adc'
      debug:
        var: command_output.stdout_lines

    - name: Stop CIP Subsystems
      when: inventory_hostname  | match('^server')
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/bin
        ./cip-control.ksh forced_stop all
        sleep 180
        ./cip-control.ksh abandon all
        sleep 30
      become_user: "{{ functional_user }}"

    - name: Start CIP Utility and Control Subsystem
      when: inventory_hostname  | match('^server')
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/bin
        ./cip-control.ksh start utility
        sleep 60
        ./cip-control.ksh start control_subsystem
        sleep 120
      become_user: "{{ functional_user }}"
    
    - name: Check CIP Utility and Control Subsystem Status
      when: inventory_hostname  | match('^server')
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/bin
        ./cip-control.ksh status all
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Check if Utility and Control are running
      when: inventory_hostname  | match('^server')
      debug:
        var: command_output.stdout_lines
    
    - name: Sync Metadata from Active>360 back to CIP
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        touch $(air sandbox eval . CIP_COMMON_LOCAL_SERIAL_LANDING)/in.subscriber_profile_manual_update.$(date +'%Y%m%d%H%M%S%N' | sed 's/...$//')
        sleep 120
      become_user: "{{ functional_user }}"

  #add user id and trigger id for future CIP

    - name: Trigger a Campaign Redeployment
      when: ab_host_alias == hostvars['cipui'].ab_host_alias
      shell: |
        source /etc/profile
        wget --post-file /dev/null http://{{ ansible_hostname }}:{{ cip_common_deploy_web_port }}/redeploy_campaign -o -
        sleep 120
      become_user: "{{ functional_user }}"

    - name: Load Subscriber Profile Information To A360
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        m_cp //{{ hostvars['cipui'].ab_host_alias }}/{{ cip_common_local_serial }}/subscriber_profile.dat {{ cip_common_local_serial }}/subscriber_profile.dat
        m_cp //{{ hostvars['cipui'].ab_host_alias }}/{{ cip_common_private_dml }}/subscriber/sample_subscriber_profile.dml {{ cip_common_private_dml }}/subscriber/sample_subscriber_profile.dml
        chmod 755 pset/subscriber_profile/create_a360_batch_ingest_data.pset
        air sandbox parameter -path pset/subscriber_profile/create_a360_batch_ingest_data.pset SUBSCRIBER_PROFILE_DATA_FILE '$CIP_COMMON_LOCAL_SERIAL/subscriber_profile.dat'
        air sandbox parameter -path pset/subscriber_profile/create_a360_batch_ingest_data.pset SUBSCRIBER_PROFILE_INPUT_DML '$CIP_COMMON_PRIVATE_DML/subscriber/sample_subscriber_profile.dml'
        cd run
        air sandbox run ../pset/subscriber_profile/create_a360_batch_ingest_data.pset      
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display create_a360_batch_ingest_data.pset Run Result
      when: ab_host_alias == hostvars['control'].ab_host_alias
      debug:
        var: command_output

    - name: Copy Lookups generated from create_a360_batch_ingest_data.pset to A360
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        m_cp {{ cip_common_local_serial }}/cip_customer_lookup_data.dat //{{ hostvars['a360_web'].ansible_hostname }}/{{ a360_ai_serial }}
        m_cp {{ cip_common_local_serial }}/cip_customer_lookup_type.dml //{{ hostvars['a360_web'].ansible_hostname }}/{{ a360_ai_serial }}
      become_user: "{{ functional_user }}"

    - name: Run the lookup load with act-admin
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        export PATH={{ exist_a360_root }}/bin:$PATH
        act-admin lookups -e cip_customer -l ingested_attributes -f {{ a360_ai_serial }}/cip_customer_lookup_data.dat -d {{ a360_ai_serial }}/cip_customer_lookup_type.dml create
        act-admin lookups status -e cip_customer -l ingested_attributes
      become_user: "{{ a360_ssh_user }}"

    - name: Hit the curl command on a360-host
      when: inventory_hostname == 'a360_web'
      uri:
        url: "http://{{ a360_webapp_server }}:{{ adc_webserver_port }}/entities/cip_customer?entity_id=10000001"
        method: GET
        user: "{{ adc_user }}"
        password: "{{ adc_password }}"
      register: http_response

    - name: Display HTTP Response
      when: inventory_hostname == 'a360_web'
      debug:
        var: http_response

    - name: Create daily unload job from A360 
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        export PATH={{ exist_a360_root }}/bin:$PATH
        cd {{ exist_a360_root }}/sand/abinitio/act/main/
        act-admin lookups -e cip_customer -l unload create
        ls -l $(air sandbox eval . ACT_API_SERIAL_LOOKUP)/cip_customer_unload*
        air sandbox pset pset/calc_cip_customer_subset_unload.pset -prototype '$GENERATED_ARTIFACT_PSET/calc_cip_customer_unload_lookup.pset'
        air sandbox parameter -path pset/calc_cip_customer_subset_unload.pset SUBSET_NAME subset_for_cip_outbound
        act-admin lookups -e cip_customer -l unload -p $(pwd)/pset/calc_cip_customer_subset_unload.pset create
      register: command_output
      become_user: "{{ a360_ssh_user }}"

    - name: Check Daily unload job creation output
      when: inventory_hostname == 'a360_web'
      debug:
        var: command_output.stdout_lines

    - name: Copy Generted Lookups from Act360 to CIP
      when: inventory_hostname == 'a360_web'
      shell: |
        source {{ exist_a360_root }}/bin/env.sh
        m_cp {{ act_api_serial_lookup }}/cip_customer_unload.latest.dat //{{ hostvars['control'].ansible_hostname }}/{{ cip_common_serial_lookup }}/
        m_cp {{ act_api_serial_lookup }}/cip_customer_unload.latest.dml //{{ hostvars['control'].ansible_hostname }}/{{ cip_common_serial_lookup }}/
      register: command_output
      become_user: "{{ a360_ssh_user }}"

    - name: run a360_unload_to_subscriber_profile_lookup.pset
      when: ab_host_alias == hostvars['control'].ab_host_alias
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/
        chmod 755 pset/subscriber_profile/a360_unload_to_subscriber_profile_lookup.pset
        air sandbox parameter -path pset/subscriber_profile/a360_unload_to_subscriber_profile_lookup.pset A360_UNLOAD_SUBSET_DML '$CIP_COMMON_SERIAL_LOOKUP/cip_customer_unload.latest.dml'
        air sandbox parameter -path pset/subscriber_profile/a360_unload_to_subscriber_profile_lookup.pset A360_UNLOAD_SUBSET_DATA '$CIP_COMMON_SERIAL_LOOKUP/cip_customer_unload.latest.dat'
        cd run
        air sandbox run ../pset/subscriber_profile/a360_unload_to_subscriber_profile_lookup.pset
        cd ..
        sleep 30
        ls -l $(air sandbox eval . CIP_COMMON_LOCAL_MFS_LOOKUP)/subscriber_profile*
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Check Subs profile created
      when: ab_host_alias == hostvars['control'].ab_host_alias
      debug:
        var: command_output.stdout_lines

    - name: Start CIP services
      when: inventory_hostname  | match('^server')
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/bin
        ./cip-control.ksh start detect_subsystem
        sleep 30
        ./cip-control.ksh start contact_policy_subsystem
        sleep 30
        ./cip-control.ksh start enrichment_subsystem
        sleep 30
        ./cip-control.ksh start communication_subsystem
        sleep 30
        ./cip-control.ksh start fulfillment_subsystem
        sleep 30
        ./cip-control.ksh start collect_event_subsystem
        sleep 30
      become_user: "{{ functional_user }}"

    - name: Run NBOS here for CIP 4
      block:
  
        - name: Touch and Delete Required lookups in NBOS 
          shell: |
            source /etc/profile
            cd {{ cip_base_path }}/private_internal/
            cd $(air sandbox eval . CIP_COMMON_LOCAL_MFS)
            dt=$(date +%Y%m%d%H%M%S)
            m_touch nbos_subscriber_offers_state_col.dat
            ls -ltr *nbos*
          register: command_output
          become_user: "{{ functional_user }}"

        - name : print command_output
          debug: 
            var: command_output

        - name: Set NBOS subsystem job parameter
          ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
          with_items:
            - air sandbox lock {{ cip_base_path }}/private_internal/pset/inbound_channel/nbos_create_new_cluster.pset
            - air sandbox parameter -path {{ cip_base_path }}/private_internal/pset/inbound_channel/nbos_create_new_cluster.pset MANAGE_NBOS_START_SERVICES False
            - air sandbox run {{ cip_base_path }}/private_internal/pset/inbound_channel/nbos_create_new_cluster.pset
            - air sandbox run "{{ cip_base_path }}/private_internal/pset/inbound_channel/build_nbos_lookup.pset" -USE_ALGO_OFFER False
            - air sandbox run {{ cip_base_path }}/private_internal/pset/control/create_offer_lookup.pset    #hot fix 
          register: command_output
          become_user: "{{ functional_user }}"
          args:
            chdir: "{{ cip_base_path }}/private_internal/run"

        - name : print command_output
          debug: 
            var: command_output

        - name: Check if cluster is operational or not
          ansible.builtin.command: '{{ installer_path }}/source_and_run.sh adc lobby status'
          register: command_output
          become_user: "{{ functional_user }}"
          args:
            chdir: "{{ cip_base_path }}/private_internal/run"
          until: command_output.stdout == "operational"
          retries: 10
          delay: 10

        - name: adc authentication
          shell: |
              source /etc/profile
              # cd {{ cip_base_path }}/private_internal/run/cip/{{ ab_host_alias }}.control
              cd {{ cip_base_path }}/private_internal/run
              adc auth create-user lobby admin -role adc-admin
              adc auth encrypted-password lobby admin $(m_password -unrestricted -password admin)
          register: command_output
          become_user: "{{ functional_user }}"
          ignore_errors: True

        - name: print logs
          debug:
             var: command_output
        
        - name: Run NBOS Subsystem job
          ansible.builtin.command: '{{ installer_path }}/source_and_run.sh {{ item }}'
          with_items:
            - "{{ cip_base_path }}/private_internal/bin/cip-control.ksh start nbos"
          register: command_output
          become_user: "{{ functional_user }}"
          args:
            chdir: "{{ cip_base_path }}/private_internal/run"

        - name : print command_output
          debug: 
            var: command_output

      when: ab_host_alias == hostvars['nbos_adapter'].ab_host_alias

    - name: Check CIP All Subsystem Status
      when: inventory_hostname  | match('^server')
      shell: |
        source /etc/profile
        cd {{ cip_base_path }}/private_internal/bin
        ./cip-control.ksh status all
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Check if CIP is running
      when: inventory_hostname  | match('^server')
      debug:
        var: command_output.stdout_lines

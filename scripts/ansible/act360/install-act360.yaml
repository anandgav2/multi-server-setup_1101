- name: A-360 Installation
  hosts: a360
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    comm_config_file: "{{ lookup('env', 'CONFIG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"
  
  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - "{{ comm_config_file }}"

    - name: Copy the wrapper script
      ansible.builtin.copy:
        content: |
          #!/bin/ksh
          source /etc/profile
          unset PG_HOME
          unset LD_LIBRARY_PATH
          unset PYTHONPATH
          export VAULT_PASSWORD={{ vault_key }}
        dest: "{{ installer_path }}/source_and_run_act360.ksh"
        mode: "0755"
        owner: "{{ functional_user }}"
        group: abinitio

 
    - name: Display Version
      ansible.builtin.debug:
        var: a360_version

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => A360 Version Installed --> {{ a360_version }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false  

    - name: Read Coop Configuration File
      slurp:
        src: "{{ installer_path }}/coop-config.ini"
      register: coop_config_file_content

    - name: Find the Installer Tar
      find:
        paths: "{{ installer_path }}"
        patterns: "Active360_*{{ a360_version }}*gz"
      register: found_files
      delegate_to: localhost
      become: false

    - name: Display  File List
      ansible.builtin.debug:
        var: found_files

    - name: Extract Folder Path
      set_fact:
        folder_path: "{{ found_files.files[0].path |  regex_replace('\\.(tgz|tar\\.gz|tar)$', '')  }}"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => A360 Tar File --> {{ found_files.files[0].path }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false  

    - name: Display  Folder Path
      ansible.builtin.debug:
        var: folder_path

    - name: Copy files to remote host
      copy:
        src: "{{ item.path }}"
        dest: "{{ installer_path }}"
        remote_src: false
        group: abinitio
      loop: "{{ found_files.files }}"
      become_user: "{{ functional_user }}"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Untar A360 Tar File --> {{ found_files.files[0].path }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false  

    - name: Untar Files
      shell: |
        su - {{ item }} -c "tar xvf {{ installer_path }}/Active360*.* -C {{ installer_path }}/"
      loop:
        - "{{ functional_user }}"

    - name: Parse Coop Configuration Values
      set_fact:
        coop_config_values: "{{ (coop_config_file_content['content'] | b64decode).split('\n') | map('trim') }}"
      register: parsed_config
   
    - name: Read Installation Directory value from config
      set_fact:
        destination: "{{ coop_config_values | select('match', '^destination=(.*)') | map('regex_replace', '^destination=(.*)', '\\1') | first }}"
        app_hub_dest: "{{ coop_config_values | select('match', '^app_hub_dest=(.*)') | map('regex_replace', '^app_hub_dest=(.*)', '\\1') | first }}"

    - name: "Fetch JAVA_HOME"
      shell: |
        sudo update-alternatives --set java $(ls -d /usr/lib/jvm/java-11-openjdk*/bin/java)
        echo $JAVA_HOME
      register: java_home 

    - name: Get Python Path
      shell: "which python3"
      register: python_path

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Running A360 Configurator
        state: present
      delegate_to: localhost
      no_log: true
      become: false  

    - name: Run Configurator tool
      expect:
        command: sh -c "source /etc/profile && ./configurator.ksh"
        chdir: "{{ folder_path }}"
        responses:
          'Would you like to use Basic mode?' : 'y'
          'Please provide ansible-vault key for password encryption:': "{{ vault_key }}"
          'ab.aiuser_name:':  "{{ functional_user }}"
          'ab.aiuser_group:':  "abinitio"
          'ab.key.host.source:': "{{ ab_key_host_source }}"
          'ab.key.client.host.urls:': "{{ ab_key_client_host_urls }}" 
          'ab.key.users.source:': "{{ ab_key_users_source }}"
          'ab.key.client.users.urls:': "{{ ab_key_client_users_urls }}"
          'ab.tmp_dir:': "{{ a360_root }}/tmp"
          'act.base_port_prefix:': "{{ act_base_port_prefix }}"
          'act.name:': "{{ act_name }}"
          'act.portal.scaled_binary_type_decimal_places:': "{{ act_portal_scaled_binary_type_decimal_places }}"
          'act.root:': "{{ a360_root }}"
          'act.data_root:': "{{ a360_root }}"
          'act.config_dir:': "{{ a360_root }}/config"
          'act.runtime.messagebus_commit_topic_width:': "{{ act_runtime_messagebus_commit_topic_width }}"
          'act.runtime.messagebus_topic_width:': "{{ act_runtime_messagebus_topic_width }}"
          'act.runtime.messagebus_log_entry_topic_width:': "{{ act_runtime_messagebus_log_entry_topic_width }}"
          'act.runtime.messagebus_log_accum_topic_width:': "{{ act_runtime_messagebus_log_accum_topic_width }}"
          'act.runtime.messagebus_service_reject_topic_width:': "{{ act_runtime_messagebus_service_reject_topic_width }}"
          'env.java_home:': "{{ java_home.stdout }}"
          'installer.cloud:' :  "{{ installer_cloud }}"
          'installer.python3:' : "{{ python_path.stdout }}"       
        timeout: 250
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Creating A360 Directories
        state: present
      delegate_to: localhost
      no_log: true
      become: false  

    - name: Create directory hierarchy and set ownership
      shell: |
        sudo mkdir -p {{ a360_root }}
        sudo mkdir -p {{ a360_root }}/tmp
        sudo chown -R {{ item }}:abinitio {{ a360_root }}
        sudo chown -R {{ item }}:abinitio {{ a360_root }}/tmp
      loop:
        - "{{ functional_user }}"

    - name: Upgrade pip3
      become: yes
      pip:
        name: pip
        state: latest

    - name: Install cryptography library
      become: yes
      pip:
        name: cryptography
        state: latest

    - name: Install Ansible
      become: yes
      pip:
        name: ansible
        state: latest

    - name: Install java-devel on CentOS/RHEL
      become: yes
      yum:
        name: java-devel
        state: present

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => Running A360 Installation
        state: present
      delegate_to: localhost
      no_log: true
      become: false  

    - name: Run Install Script
      ansible.builtin.command:
        cmd: sh -c "source {{ installer_path }}/source_and_run_act360.ksh && ./active_install.ksh -c ./active.yml >> ./a360_install.log"
      register: command_output
      ignore_errors: yes
      become_user: "{{ functional_user }}"
      args:
        chdir: "{{ folder_path }}"

    - name: Display command outputs
      ansible.builtin.debug:
        var: command_output

    - name: Read the last 20 lines of a file
      command: tail -100 {{ folder_path }}/a360_install.log
      register: tail_output
      become_user: "{{ functional_user }}"

    - name: Check for the presence of "str1" in the output
      fail:
        msg: "A360 Installation has failed check logs on {{ inventory_hostname }} - {{ folder_path }}/a360_install.log"
      when: "'FAILED - RETRYING: wait for deployment to finish (30 retries left)' not in tail_output.stdout"

    - name: Create AG User Feeds Directory
      ansible.builtin.file:
        path: "{{ apps_root_path }}/abinitio/ag_user_feeds/A360"
        state: directory
        group: abinitio
      become_user: "{{ functional_user }}"

    - name: Copy AG Feed File and User CSVs for AG
      copy:
        src: "{{ item }}"
        dest: "{{ apps_root_path }}/abinitio/ag_user_feeds/A360"
        remote_src: false
        group: abinitio
      with_items:
        - ./AGPrincipal.csv
        - ./AGPrincipalXref.csv
        - ./A360CreateUserGroup.feed
      become_user: "{{ functional_user }}"

    - name: Update the CSV file with web_app_user
      shell: |
        cd {{ apps_root_path }}/abinitio/ag_user_feeds/A360/
        sed -i 's/WEB_APP_USER/{{ web_app_user }}/g' AGPrincipal.csv
        sed -i 's/WEB_APP_USER/{{ web_app_user }}/g' AGPrincipalXref.csv
      become_user: "{{ functional_user }}"

    - name: Update AGCreateUserGroup.feed
      lineinfile:
        path: "{{ apps_root_path }}/abinitio/ag_user_feeds/A360/A360CreateUserGroup.feed"
        line: |
          FILE_LIST: {{ apps_root_path }}/abinitio/ag_user_feeds/A360/*.csv
        state: present
      become_user: "{{ functional_user }}"

    - name: Check if AG is running
      shell: |
        source {{ a360_root }}/bin/env.sh
        ab-app status ag
      register: command_output
      ignore_errors: yes
      become_user: "{{ functional_user }}"

    - name: Run AG if not running
      when: "'is running' not in command_output.stdout"
      shell: |
        source {{ a360_root }}/bin/env.sh
        nohup ab-app start ag > /dev/null 2>&1 &
        sleep 90
      become_user: "{{ functional_user }}"

    - name: Setup Web App User
      shell: |
        source {{ a360_root }}/bin/env.sh
        source {{ a360_root }}/ab-deployments/ag/config/import.profile
        export AB_AG_CONN_PARAMS="$AB_AG_CONN_PARAMS -u {{ a360_ag_user }} -p {{ a360_ag_password }}"
        ag-import feed save {{ apps_root_path }}/abinitio/ag_user_feeds/A360/A360CreateUserGroup.feed
        ag-import run -feed "A360CreateUserGroup" -progress -approve
      become_user: "{{ functional_user }}"

    - name: Run Rest of the services if not running
      shell: |
        source {{ a360_root }}/bin/env.sh
        nohup ab-app start act_mhub > /dev/null 2>&1 &
        sleep 90
        nohup ab-app start activeportal > /dev/null 2>&1 &
        sleep 90
      ignore_errors: yes
      become_user: "{{ functional_user }}"


- name: Run Installer Script with Configuration File
  hosts:
    - a360-instance
    - cip-instance
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"

  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"
        - ./password.yml

    - name: Copy Config File
      copy:
        src: "./coop-config.ini"
        dest: "{{ installer_path }}"
        remote_src: false
        group: abinitio
      become_user: "{{ functional_user }}"

    - name: Update coop-config.ini
      shell: |
        sed -i 's/owner=abinitio/owner={{ functional_user }}/g' {{ installer_path }}/coop-config.ini
      become_user: "{{ functional_user }}"

    - name: Read Configuration File
      slurp:
        src: "{{ installer_path }}/coop-config.ini"
      register: config_file_content

    - name: Copy the wrapper script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          source /etc/profile
          exec "$@"
        dest: "{{ installer_path }}/source_and_run.sh"
        mode: "0755"
        owner: "{{ functional_user }}"
        group: abinitio

    - name: Parse Configuration Values
      set_fact:
        config_values: "{{ (config_file_content['content'] | b64decode).split('\n') | map('trim') }}"
      register: parsed_config

    - name: Skip Header Line
      set_fact:
        config_values_no_header: "{{ config_values | reject('match', '^\\[Coop\\]$') | list }}"

    - name: Display Arguments
      debug:
        var: config_values_no_header

    - name: Log step
      when: inventory_hostname != 'a360-instance'
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>Searching for installer for Coop Version {{ coop_version }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Find the Installer Tar
      find:
        paths: "{{ installer_path }}"
        patterns: "AbInitio*{{ coop_version }}*.*"
      register: found_files
      delegate_to: localhost
      become: false
    - name: Display  File List
      ansible.builtin.debug:
        var: found_files

    - name: Log step
      when: inventory_hostname != 'a360-instance'
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>Found Installer {{ found_files.files[0].path }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Copy files to remote host
      copy:
        src: "{{ item.path }}"
        dest: "{{ installer_path }}/"
        remote_src: false
        group: abinitio
      loop: "{{ found_files.files }}"
      become_user: "{{ functional_user }}"

    - name: Untar Files
      shell: |
        su - {{ item }} -c "tar zxvf {{ installer_path }}/AbInitio*{{ coop_version }}*.* -C {{ installer_path }}/"
      loop:
        - "{{ functional_user }}"

    - name: Extract Folder Path
      set_fact:
        folder_path: "{{ found_files.files[0].path | regex_replace('\\.(tgz|tar\\.gz|tar)$', '')  }}"

    - name: Run Installer Script with Configuration Values
      ansible.builtin.command: "./abinst {{ config_values_no_header | join(' ') }}"
      register: command_output
      poll: 5
      args:
        chdir: "{{folder_path }}"

    - name: Read Installation Directory value from config
      set_fact:
        destination: "{{ config_values | select('match', '^destination=(.*)') | map('regex_replace', '^destination=(.*)', '\\1') | first }}"
        app_hub_dest: "{{ config_values | select('match', '^app_hub_dest=(.*)') | map('regex_replace', '^app_hub_dest=(.*)', '\\1') | first }}"

    - name: Print extracted parameter values
      debug:
        msg: |
          destination: {{ destination }}
          app_hub_dest: {{ app_hub_dest }}

    - name: Add environment parameters to /etc/profile
      lineinfile:
        path: /etc/profile
        line: |
          export AB_HOME={{ destination }}/abinitio-V{{ coop_version }}
          export AB_APPLICATION_HUB={{ app_hub_dest }}
          export PATH=$AB_HOME/bin:$PATH
          export AB_AIR_ROOT=//{{ cip_hostname }}/{{ data_root_path }}/eme/cipeme/repo
        state: present  # Add the line if not present
      notify: Reload Profile

    - name: Setup ab-cinfod daemon
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-cinfo-util create -cloud"
      become_user: "{{ functional_user }}"

    - name: Start ab-cinfod daemon
      shell: "{{ installer_path }}/source_and_run.sh ab-cinfod &"
      become_user: "{{ functional_user }}"

    - name: Print ab-cinfod daemon
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-cinfo-util status"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display ab-cinfod output
      ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>ab-cinfo daemon started on {{ inventory_hostname }}.
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Set params in global abinitiorc
      lineinfile:
        path: "{{ destination }}/abinitio-V{{ coop_version }}/config/abinitiorc"
        line: |
          AB_HOSTNAME_KEYSERVER_URLS : {{ ab_key_client_host_urls }}
          AB_AIR_ROOT : //{{ cip_hostname }}/{{ data_root_path }}/eme/cipeme/repo
          AB_CHARSET : utf-8
        state: present
    - name: Add Keyserver information in global apphubrc
      lineinfile:
        path: "{{ app_hub_dest }}/config/apphubrc"
        line: |
          AB_KEYSERVER_GROUPS : {{ ab_key_group }}
          AB_KEYSERVER_URLS @ {{ ab_key_group }} : {{ ab_key_client_users_urls }}
          AB_DESCRIPTION @ {{ ab_key_group }} : Rype Development and training server

    - name: Configure Key Client
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh abkcconf -b /var/abinitio/data -u {{ functional_user }} -s"

    - name: Start Key Client
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh /var/abinitio/data/abkc/abkcd start"
      become_user: "{{ functional_user }}"

    - name: Pause for 20 seconds
      pause:
        seconds: 20

    - name: Check Keys
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-key show"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display Key output
      ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>key client daemon started on {{ inventory_hostname }}. Key Details
             {{ command_output.stdout }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Setup default bridge
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-bridge configure create-default
        - cp {{ app_hub_dest }}/config/bridge-configurations/default-aes128.xml.example {{ app_hub_dest }}/config/bridge-configurations/default-aes128.xml
        - ab-bridge start
      become_user: "{{ functional_user }}"

    - name: Check Bridge Status
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-bridge status"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display Bridge Status
      ansible.builtin.debug:
        var: command_output.stdout_lines


    - name: Log step
      when: inventory_hostname != 'a360-instance'
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>Bridge daemon started on {{ inventory_hostname }}. Bridge Details
             {{ command_output.stdout_lines }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create EME
      when: inventory_hostname != 'a360-instance'
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh air repository create"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display EME Status
      when: inventory_hostname != 'a360-instance'
      ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Change EME Charset
      when: inventory_hostname != 'a360-instance'
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - air repository shutdown
        - air repository charset -change utf-8 -force
        - air repository start
        - air repository charset -show
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Check EME Status
      when: inventory_hostname != 'a360-instance'
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - air repository show-server
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display EME Status
      when: inventory_hostname != 'a360-instance'
      ansible.builtin.debug:
        var: command_output

    - name: Log step
      when: inventory_hostname != 'a360-instance'
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>EME started on {{ inventory_hostname }}. EME Status
             {{ command_output.results[0].stdout }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create EME Root User
      when: inventory_hostname != 'a360-instance'
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - air system user create {{ eme_user }} -group eme-root -clear-password {{ eme_en_passwd }}
      register: command_output
      become_user: "{{ functional_user }}"
      no_log: true

    - name: Publish Repository in apphubrc
      lineinfile:
        path: "{{ app_hub_dest }}/config/apphubrc"
        line: |
          AB_EME_REPOSITORIES : cipeme
          AB_AIR_ROOT @ cipeme : //{{ cip_hostname }}/{{ data_root_path }}/eme/cipeme/repo
          AB_DISPLAY_NAME @ cipeme : cipeme
          AB_DESCRIPTION @ cipeme : CIP Technical Repository

    - name: Install Python 3
      ansible.builtin.package:
        name: python3
        state: present

    - name: Get Python Path
      ansible.builtin.command: "which python3"
      register: python_path

    - name: Display Python Path
      ansible.builtin.debug:
        var: python_path.stdout

  handlers:
    - name: Reload Profile
      shell: source /etc/profile  # Command to reload the profile

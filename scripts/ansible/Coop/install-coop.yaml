- name: Run Installer Script with Configuration File
  hosts:
    - server*
  become: yes # Run tasks with root privileges
  vars:
    log_file: "{{ lookup('env', 'LOG_FILE').split(',') | first}}"
    installer_path: "{{ lookup('env', 'INSTALLER_PATH').split(',') | first}}"

  tasks:

    - name: Load Global parameters
      include_vars:
        file: "{{ item }}"
      with_items:
        - "{{ installer_path }}/cip_setup_automation.yml"
        - "{{ installer_path }}/installer-versions.yml"

    - name: Copy Config File
      copy:
        src: "./coop-config.ini"
        dest: "{{ installer_path }}"
        remote_src: false
        group: abinitio
      become_user: "{{ functional_user }}"

    - name: Update coop-config.ini
      shell: |
        sed -i 's#destination=.*#destination={{ ab_home_dir }}#g' {{ installer_path }}/coop-config.ini
        sed -i 's#app_hub_dest=.*#app_hub_dest={{ ab_application_hub }}#g' {{ installer_path }}/coop-config.ini
        sed -i 's#owner=abinitio#owner={{ functional_user }}#g' {{ installer_path }}/coop-config.ini
        sed -i 's#utility=.*#utility={{ ab_work_dir }}#g' {{ installer_path }}/coop-config.ini
        sed -i 's#data_dir=.*#data_dir={{ ab_data_dir }}#g' {{ installer_path }}/coop-config.ini
      become_user: "{{ functional_user }}"

    - name: Read Configuration File
      slurp:
        src: "{{ installer_path }}/coop-config.ini"
      register: config_file_content

    - name: Copy the wrapper script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          source /etc/profile
          exec "$@"
        dest: "{{ installer_path }}/source_and_run.sh"
        mode: "0755"
        owner: "{{ functional_user }}"
        group: abinitio

    - name: Parse Configuration Values
      set_fact:
        config_values_no_header: "{{ (config_file_content['content'] | b64decode).split('\n') | map('trim') | reject('match', '^\\[Coop\\]$') | list}}"

    - name: Display Arguments
      debug:
        var: config_values_no_header

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>Searching for installer for Coop Version {{ coop_version }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Find the Installer Tar
      find:
        paths: "{{ installer_path }}"
        patterns: "AbInitio*{{ coop_version }}*.*"
      register: found_files
      delegate_to: localhost
      become: false

    - name: Display  File List
      ansible.builtin.debug:
        var: found_files

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>Found Installer {{ found_files.files[0].path }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Copy files to remote host
      copy:
        src: "{{ item.path }}"
        dest: "{{ installer_path }}/"
        remote_src: false
        group: abinitio
      loop: "{{ found_files.files }}"
      become_user: "{{ functional_user }}"

    - name: Untar Files
      shell: |
        su - {{ item }} -c "tar zxvf {{ installer_path }}/AbInitio*{{ coop_version }}*.* -C {{ installer_path }}/"
      loop:
        - "{{ functional_user }}"

    - name: Extract Folder Path
      set_fact:
        folder_path: "{{ found_files.files[0].path | regex_replace('\\.(tgz|tar\\.gz|tar)$', '')  }}"

    - name: Run Installer Script with Configuration Values
      ansible.builtin.command: "./abinst {{ config_values_no_header | join(' ') }}"
      register: command_output
      poll: 5
      args:
        chdir: "{{ folder_path }}"

    - name: Read Installation Directory value from config
      set_fact:
        destination: "{{ config_values_no_header | select('match', '^destination=(.*)') | map('regex_replace', '^destination=(.*)', '\\1') | first }}"
        app_hub_dest: "{{ config_values_no_header | select('match', '^app_hub_dest=(.*)') | map('regex_replace', '^app_hub_dest=(.*)', '\\1') | first }}"

    - name: Print extracted parameter values
      debug:
        msg: |
          destination: {{ destination }}
          app_hub_dest: {{ app_hub_dest }}

    - name: Copy host alias File
      copy:        
        src: "{{ installer_path }}/host_alias.txt"
        dest: "{{ installer_path }}"
        remote_src: false
        group: abinitio
      become_user: "{{ functional_user }}"

    # - name: find host alias in host_alias.txt
    #   set_fact:
    #      eme_host_alias: "{{ lookup('file', installer_path+'/host_alias.txt').splitlines() | select('search',hostvars[item].ansible_host) | first | split(' ') | first }}"
    #   loop: "{{ hostvars.keys() | select('match', 'eme') | list }}"

    - name: find host alias in host_alias.txt
      set_fact:
         eme_host_alias: "{{ hostvars['eme'].ab_host_alias }}"
         
    #values set according to skuad-e2e-abinitio01
    - name: Add environment parameters to /etc/profile
      lineinfile:
        path: /etc/profile
        line: |
          export AB_HOME={{ destination }}/abinitio-V{{ coop_version }}
          export AB_APPLICATION_HUB={{ app_hub_dest }}
          export PATH=$AB_HOME/bin:$PATH
        state: present  # Add the line if not present
      notify: Reload Profile

    - name: Add environment parameters to /etc/profile
      lineinfile:
        path: /etc/profile
        line: |
          AB_AIR_ROOT=//{{ eme_host_alias }}{{ data_root_path }}/eme/cipeme/repo
        state: present  # Add the line if not present
      notify: Reload Profile
      when: ab_host_alias != hostvars['a360'].ab_host_alias

    - name: Setup ab-cinfod daemon
      shell: |
        source /etc/profile
        ab-cinfo-util create -cloud
        ab-cinfod &
        sleep 10
        ab-cinfo-util status
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display ab-cinfod output
      ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>ab-cinfo daemon started on {{ inventory_hostname }}.
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Create Host Alias File
      lineinfile:
        path: "{{ installer_path }}/host_alias_file.dat"
        line: |
          {{ hostvars[item].ab_host_alias }} {{ hostvars[item].ansible_hostname }}
          {{ hostvars[item].ab_host_alias }} {{ hostvars[item].ansible_host }}
        state: present
      become_user: "{{ functional_user }}"
      loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"

    #values set according to skuad-e2e-abinitio01
    - name: Set params in global abinitiorc
      lineinfile:
        path: "{{ destination }}/abinitio-V{{ coop_version }}/config/abinitiorc"
        line: |
          AB_HOSTNAME_KEYSERVER_URLS : {{ ab_key_client_host_urls }} 
          AB_CHARSET : utf-8 
          AB_HOST_INTERFACE : {{ ab_host_alias }}
          AB_AIR_ROOT : //{{ eme_host_alias }}{{ data_root_path }}/eme/cipeme/repo
          AB_TCP_PORT_LEAST : 15000
          AB_TCP_PORT_MOST : 35000
          AB_HOST_ALIAS_FILE: {{ installer_path }}/host_alias_file.dat
        state: present

    #values set according to skuad-e2e-abinitio01
    - name: Add Keyserver information in global apphubrc
      lineinfile:
        path: "{{ app_hub_dest }}/config/apphubrc"
        line: |
          AB_KEYSERVER_GROUPS : {{ ab_key_group }}
          AB_KEYSERVER_URLS @ {{ ab_key_group }} : {{ ab_key_client_users_urls }}
          AB_DESCRIPTION @ {{ ab_key_group }} : Rype Development and training server

          AB_EME_REPOSITORIES : cipeme
          AB_AIR_ROOT @ cipeme : //{{ eme_host_alias }}{{ data_root_path }}/eme/cipeme/repo
          AB_DISPLAY_NAME @ cipeme : cipeme
          AB_DESCRIPTION @ cipeme : CIP Technical Repository
        state: present  

    - name: Configure Key Client
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh abkcconf -b {{ ab_data_dir }} -u {{ functional_user }} -s"

    - name: Start Key Client
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ ab_data_dir }}/abkc/abkcd start"
      become_user: "{{ functional_user }}"

    - name: Pause for 20 seconds
      pause:
        seconds: 20

    - name: Check Keys
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-key show"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display Key output
      ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>key client daemon started on {{ inventory_hostname }}. Key Details
             {{ command_output.stdout }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Setup default bridge
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh {{ item }}"
      with_items:
        - ab-bridge configure create-default
        - cp {{ app_hub_dest }}/config/bridge-configurations/default-aes128.xml.example {{ app_hub_dest }}/config/bridge-configurations/default-aes128.xml
        - ab-bridge start
      become_user: "{{ functional_user }}"

    - name: Check Bridge Status
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh ab-bridge status"
      register: command_output
      become_user: "{{ functional_user }}"

    - name: Display Bridge Status
      ansible.builtin.debug:
        var: command_output.stdout_lines

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          =>Bridge daemon started on {{ inventory_hostname }}. Bridge Details
             {{ command_output.stdout_lines }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Generate ENC Password
      ansible.builtin.command: "{{ installer_path }}/source_and_run.sh m_password -password {{ functional_user_password }} -unrestricted"
      register: command_output
      become_user: "{{ functional_user }}"

    # - name: Get CIP hostnames and IPs
    #   set_fact:
    #     cip_servers: "{{ cip_servers | default([]) + [ hostvars[item].ansible_hostname, hostvars[item].ansible_host ] }}"
    #     a360_servers: "{{ a360_servers | default([]) + [ 'localhost' ]}}"
    #   loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"
    #   when: hostvars[item].ansible_host !=  hostvars['a360'].ansible_host

    # - name: Get A360 hostnames and IPs
    #   set_fact:
    #     a360_servers: "{{ a360_servers | default([]) + [  hostvars[item].ansible_hostname , hostvars[item].ansible_host ] }}"
    #   loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"
    #   when: hostvars[item].ansible_host ==  hostvars['a360'].ansible_host

    - name: Get CIP host aliases
      set_fact:
        cip_servers: "{{ cip_servers | default([]) + [ hostvars[item].ab_host_alias, hostvars[item].ansible_hostname ] }}"
      loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"
      when: hostvars[item].ansible_host !=  hostvars['a360'].ansible_host

    - name: Get A360 host aliases
      set_fact:
        a360_servers: "{{ a360_servers | default([]) + [  hostvars[item].ab_host_alias, hostvars[item].ansible_hostname ] }}"
      loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"
      when: hostvars[item].ansible_host ==  hostvars['a360'].ansible_host

    - name: Create Hetro connection File
      lineinfile:
        path: "/home/{{ functional_user }}/.abinitiorc"
        line: |
          
          #AB_JOB_ALLOWED_HOSTNAMES: {{ cip_servers | join(':') }}:{{ a360_servers | join(':') }}
 
          AB_NODES @ CIP : {{ cip_servers | join(' ') }}
          AB_USERNAME @ CIP : {{ functional_user }}
          AB_CONNECTION @ CIP : ssh
          AB_SSH_NEEDS_PASSWORD @ CIP : ture
          AB_ENCRYPTED_PASSWORD @ CIP : {{ command_output.stdout }}
          AB_HOME @ CIP : {{ destination }}/abinitio-V{{ coop_version }}

          AB_NODES @ A360 : {{ a360_servers | join(' ') }}
          AB_USERNAME @ A360 : {{ functional_user }}
          AB_CONNECTION @ A360 : ssh
          AB_SSH_NEEDS_PASSWORD @ A360 : ture
          AB_ENCRYPTED_PASSWORD @ A360 : {{ command_output.stdout }}

        state: present
        create: yes
      become_user: "{{ functional_user }}"

    - name: Log step
      lineinfile:
        path: "{{ log_file }}"
        line: |
          => User Abinitio RC created on {{ inventory_hostname }}
        state: present
      delegate_to: localhost
      no_log: true
      become: false

    - name: Get SSH Sever
      set_fact:
        ssh_servers: "{{ ssh_servers | default([]) + [ hostvars[item].ansible_hostname, hostvars[item].ansible_host ] }}"
      loop: "{{ hostvars.keys() | select('match', '^server.*') | list }}"
  
    - name: SSH into the server and accept key fingerprint for hetro connection
      expect:
        command: ssh {{ item }}
        responses:
          'Are you sure you want to continue connecting (yes/no/[fingerprint])?': "yes"
        timeout: 10
      become_user: "{{ functional_user }}"
      loop: "{{ ssh_servers }}"
      ignore_errors: yes

    # - name: SSH into the server and accept key fingerprint IP
    #   expect:
    #     command: ssh {{ item }}
    #     responses:
    #       'Are you sure you want to continue connecting (yes/no/[fingerprint])?': "yes"
    #     timeout: 10
    #   become_user: "{{ functional_user }}"
    #   loop: "{{ a360_servers }}"
    #   ignore_errors: yes

  handlers:
    - name: Reload Profile
      shell: source /etc/profile  # Command to reload the profile

pipeline {

    agent {
        label "${AGENT_NODE}"
    }

    tools {
        terraform 'Terraform'
    }

    environment {
            JOB_NAME = "${env.JOB_NAME}"
            LOG_FILE = "${INSTALLER_PATH}/${JOB_NAME}.log"
            CONFIG_FILE="${WORKSPACE}/scripts/ansible/cip_common_setup.yml"
            TIME_FORMAT = "yyyy-MM-dd HH:mm:ss"
    }

        
    stages {

         stage('Initialize Logs and run validation') {
            steps {

                script {
                    echo "##### SUMMARY LOG FILE : ${env.LOG_FILE} #########"
                    sh "rm -f ${env.LOG_FILE}"
                    sh "touch ${env.LOG_FILE}"
                    sh "rm -f ${env.CONFIG_FILE}"
                    sh "touch ${env.CONFIG_FILE}"

                    // Run Input Validation
                    sh 'cd "${WORKSPACE}/scripts/ansible/Validation"  ; ansible-playbook input-validation.yml'
                }
            }
        }

        stage('Get CIP Version') {
            steps {

                script {
                    //Read CIP Version
                    def cipVersion = sh(script: "awk '/cip_version:/ {print \$2}' ${INSTALLER_PATH}/installer-versions.yml | awk -F'-' '{print \$1}' | cut -c2-", returnStdout: true).trim()
                    env.CIP_VERSION = "${cipVersion}"
                    echo "CIP_VERSION: ${env.CIP_VERSION}"
                }
            }
        }

        stage('Terraform Create EC2 Instances')
        {
            when {
                expression {
                    return env.USE_EXISTING_SERVERS == "False"
                }
            }

            steps
            {
                script {
                    dir("${WORKSPACE}/scripts/terraform") {
                        def sT = new Date()
                        def startTime = sT.format(TIME_FORMAT)
                        sh "echo ----------- SERVER CREATION STARTED -----------  >> ${env.LOG_FILE}"
                        sh "echo Start Time ::  ${startTime} >> ${env.LOG_FILE}"
                        sh """
                            pwd;
                            terraform init --lock=false;
                            terraform plan --lock=false -var 'host_alias_path=${env.INSTALLER_PATH}/host_alias.txt' -out=myplan.tfplan;
                            
                        """
                        sh 'terraform apply --lock=false -auto-approve myplan.tfplan'
                        def eT = new Date()
                        def endTime = eT.format(TIME_FORMAT)
                        sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
                        sh "echo SERVER PUBLIC IPs >> ${env.LOG_FILE}"
                        sh "terraform output >> ${env.LOG_FILE}"
                        sh "echo ------- SERVER CREATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
                    }
                }

            }
        }

        stage('Create Inventory File') {
            steps {
                script {
                    sh "echo ------- Generate inventory file ---------- >> ${env.LOG_FILE}"
                    sh 'cd "${WORKSPACE}/scripts/ansible/ServerConfig"  ; ansible-playbook  --vault-password-file=../cip_vault_key create-inventory.yaml'
                    sh "echo ------- Generated inventory file ---------- >> ${env.LOG_FILE}"
                }
            }
        }

        stage('Configure Server')
        {
            steps
            {
                script{
                    def sT = new Date()
                    def startTime = sT.format(TIME_FORMAT)
                    sh "echo ----------- SERVER CONFIGURATION STARTED -----------  >> ${env.LOG_FILE}"
                    sh "echo Start Time ::  ${startTime} >> ${env.LOG_FILE}"
                    sh 'cd "${WORKSPACE}/scripts/ansible/ServerConfig"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key configure-server.yaml'
                    def eT = new Date()
                    def endTime = eT.format(TIME_FORMAT)
                    sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
                    sh "echo ------- SERVER CONFIGURATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
                }
            }
        }

        // stage('Install Co>Operating System')
        // {
        //     steps
        //     {
        //         script{
        //             echo""
        //             def sT = new Date()
        //             def startTime = sT.format(TIME_FORMAT)
        //             sh "echo ----------- COOP INSTALLATION STARTED -----------  >> ${env.LOG_FILE}"
        //             sh 'cd "${WORKSPACE}/scripts/ansible/Coop"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-coop.yaml'
        //             def eT = new Date()
        //             def endTime = eT.format(TIME_FORMAT)
        //             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //             sh "echo ------- COOP INSTALLATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //         }
        //     }
        // }

        // stage('Run Batch#1, Batch#2 and Batch#3 in Parallel') {
        //     parallel 
        //     {
        //         stage('Batch#1- Install A360') 
        //         { 
        //             when {
        //                 expression {
        //                     return env.USE_EXISTING_A360 == "False" && env.CIP_VERSION.toInteger() > 3
        //                 }
        //             }

        //             steps 
        //             { 
        //                 script{
        //                     echo""
        //                     def sT = new Date()
        //                     def startTime = sT.format(TIME_FORMAT)
        //                     sh "echo ----------- A360 INSTALLATION STARTED -----------  >> ${env.LOG_FILE}"        
        //                     sh 'cd "${WORKSPACE}/scripts/ansible/act360"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-act360.yaml' 
        //                     def eT = new Date()
        //                     def endTime = eT.format(TIME_FORMAT)
        //                     sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}" 
        //                     sh "echo ------- A360 INSTALLATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                 }

        //             }
        //         } /* close Batch #1*/

        //         stage('Batch#2- AG,Cafe,CC & QueryIt ') {
        //             stages {
                        
        //                 stage('Install AG')
        //                 {
        //                     when {
        //                         expression {
        //                             return env.USE_EXISTING_AG == "False" 
        //                         }
        //                     }
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- AG INSTALLATION STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/AG"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-AG.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- AG INSTALLATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 }

        //                 stage('Use Existing AG')
        //                 {
        //                     when {
        //                         expression {
        //                             return env.USE_EXISTING_AG == "True" 
        //                         }
        //                     }
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- CONFIGURE EXISITNG AG -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/AG"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key existing-AG.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- AG CONFIGURATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 }

        //                 stage('Install Cafe')
        //                 {
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- CAFE INSTALLATION STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/Cafe"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-cafe.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- CAFE INSTALLATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 }

        //                 stage('Install CC')
        //                 {
        //                     when {
        //                         expression {
        //                             return env.USE_EXISTING_CC == "False" 
        //                         }
        //                     }
        //                     steps
        //                     {
        //                         script{        
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- Control Center INSTALLATION STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CC"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-CC.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- Control Center INSTALLATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 }

        //                 stage('Use Existing CC')
        //                 {
        //                     when {
        //                         expression {
        //                             return env.USE_EXISTING_CC == "True" 
        //                         }
        //                     }
        //                     steps
        //                     {
        //                         script{        
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- CONFIGURE EXISITNG CC -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CC"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key existing-CC.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- CONFIGURATION OF EXISITNG CC SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 }

        //                 stage('Install QueryIT')
        //                 {
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo -----------Install Query>IT STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/QueryIT"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-queryit.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- Install Query>IT SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 }
        //            } /* close Batch #2 serial stages*/
        //        } /* close Batch #2*/
                
        //         stage('Batch#3- EME, CIP & Seed Data') 
        //         {
        //             stages 
        //             {
        //                 stage('Create EME')
        //                 {
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- Create EME STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/EME"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-eme.yaml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- Create EME SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 } 
                        
        //                 stage('Generate Executables and CIP Inventory file')
        //                 {
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- Generating Execuatbles and CIP Inventory file -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/setup_multiserver"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key setup_multiserver_subsystems.yml'                    
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- Execuatbles and CIP Inventory file creation successful---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 } 

        //                 stage('Install CIP')
        //                 {
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- CIP INSTALLATION STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CIP"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-cip-main.yml'
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CIP"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key install-cip-datadir-creation.yml'
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/setup_multiserver"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key copy_executables.yml'
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CIP"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key create_db.yml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- CIP INSTALLATION SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 } 

        //                 stage('Seed Data')
        //                 {
        //                     steps
        //                     {
        //                         script{
        //                             echo""
        //                             def sT = new Date()
        //                             def startTime = sT.format(TIME_FORMAT)
        //                             sh "echo ----------- Setup Seed Data STARTED -----------  >> ${env.LOG_FILE}"
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/seed-data"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key seed-data.yaml'
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CIP"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key start-create-env.yml'
        //                             sh 'cd "${WORKSPACE}/scripts/ansible/CIP"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key load-subscriber-profile.yml'
        //                             def eT = new Date()
        //                             def endTime = eT.format(TIME_FORMAT)
        //                             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //                             sh "echo ------- Setup Seed Data SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //                         }
        //                     }
        //                 } 
        //             }/* close Batch#3 serial stages*/
        //         }/* close Batch#3*/
                
        //     }/* close parallel */
        // }/* close parallel stage*/

        // stage('Start CIP Subsystem')
        // {
        //     when {
        //         expression {
        //             env.CIP_VERSION.toInteger() == 3
        //         }
        //     }
        //     steps
        //     {
        //         script{
        //             echo""
        //             def sT = new Date()
        //             def startTime = sT.format(TIME_FORMAT)
        //             sh "echo ----------- Bringing UP CIP Subsystems -----------  >> ${env.LOG_FILE}"
        //             sh 'cd "${WORKSPACE}/scripts/ansible/CIP"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key start-cip.yaml'
        //             def eT = new Date()
        //             def endTime = eT.format(TIME_FORMAT)
        //             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //             sh "echo ------- CIP Subsystems STARTED SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //         }
        //     }
        // }

        // stage('A360 and CIP Integration, and Start CIP Subsystem') 
        // { 
        //     when {
        //         expression {
        //             env.USE_EXISTING_A360 == "False" && env.CIP_VERSION.toInteger() > 3
        //         }
        //     }
        //     steps 
        //     {     
        //         script{
        //             echo""
        //             def sT = new Date()
        //             def startTime = sT.format(TIME_FORMAT)
        //             sh "echo ----------- A360 Integration STARTED -----------  >> ${env.LOG_FILE}"        
        //             sh 'cd "${WORKSPACE}/scripts/ansible/act360"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key A360_and_cip_integration.yaml' 
        //             def eT = new Date()
        //             def endTime = eT.format(TIME_FORMAT)
        //             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}" 
        //             sh "echo ------- A360 Integration SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //         }
        //     }
        // } 

        // stage('Existing A360 and CIP Integration, and Start CIP Subsystem') 
        // { 
        //     when {
        //         expression {
        //             env.USE_EXISTING_A360 == "True" && env.CIP_VERSION.toInteger() > 3
        //         }
        //     }
        //     steps 
        //     {     
        //         script{
        //             echo""
        //             def sT = new Date()
        //             def startTime = sT.format(TIME_FORMAT)
        //             sh "echo ----------- A360 Integration STARTED -----------  >> ${env.LOG_FILE}"        
        //             sh 'cd "${WORKSPACE}/scripts/ansible/act360"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key existing_A360_and_cip_integration.yaml' 
        //             def eT = new Date()
        //             def endTime = eT.format(TIME_FORMAT)
        //             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}" 
        //             sh "echo ------- A360 Integration SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //         }
        //     }
        // } 

        // stage('Start CIPUI')
        // {
        //     steps
        //     {
        //         script{
        //             echo""
        //             def sT = new Date()
        //             def startTime = sT.format(TIME_FORMAT)
        //             sh "echo ----------- Installing CIP UI -----------  >> ${env.LOG_FILE}"
        //             sh 'cd "${WORKSPACE}/scripts/ansible/CIPUI"  ; ansible-playbook -i ../../terraform/inventory.yml --vault-password-file=../cip_vault_key start-cipui.yaml'
        //             def eT = new Date()
        //             def endTime = eT.format(TIME_FORMAT)
        //             sh "echo End Time ::  ${endTime} >> ${env.LOG_FILE}"
        //             sh "echo ------- CIP UI Installation SUCCESSFUL ---------- >> ${env.LOG_FILE}"
        //         }
        //     }
        // }  
    }
}
